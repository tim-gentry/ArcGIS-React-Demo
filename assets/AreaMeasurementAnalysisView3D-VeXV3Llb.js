import{dk as Ve,d5 as te,bB as T,bq as xe,bp as u,bk as Ie,hT as Ge,ha as Te,bJ as ze,dO as Fe,dS as We,d0 as Ue,bv as ke,c$ as D,d6 as K,dZ as je,oO as ae,bX as qe,ac as l,ad as d,ag as J,bh as oe,bY as O,b$ as le,b5 as He,ba as he,hK as Be,dN as ie,bL as Ne,n as Je,aI as Ze,_ as Ke,dn as q,cZ as de,cQ as ce,kE as Qe,he as Xe,kH as pe,hb as ue,jF as Ye,hd as me,ib as et,fa as tt,dI as P,pU as it,bA as ge,eP as st,ic as rt,eu as nt,et as ot,es as at,er as lt}from"./index-DX0rcHuW.js";import{e as ht}from"./defaultUnit-CeSgMfuW.js";import{s as dt}from"./AnalysisView3D-CE-ePUC9.js";import{e as se}from"./interfaces-js1RL7O8.js";import{a as Q,s as re,l as _e}from"./quantityUtils-DSpmykXR.js";import{o as fe,m as ct,r as pt}from"./vec2-C-4tM9Uv.js";import{n as ye,r as De}from"./vec2f64-Diu2Kaa8.js";import{a as ve}from"./spatialReferenceEllipsoidUtils-Bv0mQCFg.js";import{n as H}from"./projectVectorToVector-DjKO2tJh.js";import{c as W}from"./projectPointToVector-6lqiVL77.js";import{t as we}from"./Indices-BZu2O98k.js";import{_ as ut}from"./sphere-COyqsaGw.js";import{S as mt}from"./triangle-CGr49R4x.js";import{h as gt,j as _t,m as ft,p as yt,g as vt}from"./measurementUtils-5K9lUJ4f.js";import{b as wt}from"./ElevationProvider-Xg9LKEp7.js";import{d as ne,b as Le,j as Lt}from"./mathUtils-BsqbT0oM.js";import{k as Se}from"./euclideanAreaMeasurementUtils-CSfRbE78.js";import{l as St,h as $t}from"./euclideanLengthMeasurementUtils-CuSkQONc.js";import{r as bt,u as Pt,f as Ct}from"./geodesicLengthMeasurementUtils-1VjlYqtL.js";import{t as Mt}from"./projectionUtils-CDoMO8GK.js";import{E as $e,p as At,P as Vt,a as xt}from"./EditGeometryOperations-BmjyQqm3.js";import{g as Re}from"./quantityFormatUtils-BcCMIlyg.js";import{e as Gt}from"./mat4f64-Dk4dwAN8.js";import{f as be,_ as Dt,m as Rt}from"./Segment-xXvhpXJM.js";import{f as I}from"./LineVisualElement-MvRjXGhW.js";import{a as Ot}from"./Object3DVisualElement-CUM8kkkv.js";import{t as Pe}from"./orientedBoundingBox-BTwqkknQ.js";import{o as Et,a as It,c as Tt,q as zt,b as Ce,e as Ft,g as E,i as Wt,r as Ut,j as kt,k as jt,a2 as qt,l as Ht,s as Bt,m as Nt,E as X,n as Jt,I as Zt}from"./Texture-0jciB86n.js";import{O as Kt,u as Qt,h as x}from"./Material-BfvzXcva.js";import{e as B}from"./VertexAttribute-BnAa5VW0.js";import{v as Y}from"./Matrix4PassUniform-CTNrzJ6Q.js";import{r as Xt}from"./VertexColor.glsl-BX9otDj2.js";import{f as Yt}from"./DefaultLayouts-LbPHMYzg.js";import{e as ei}from"./ColorMaterial.glsl-CcrBVOmk.js";import{R as U}from"./enums-BlUEVwJR.js";import{l as ti,S as ii,o as si,_ as ri}from"./renderState-yUi34s5A.js";import{r as V}from"./ShaderTechniqueConfiguration-D3UbJ2mX.js";import{h as ni}from"./lineStippleUtils-Cu2kwDBg.js";import{o as ee}from"./interfaces-B8ge7Jg9.js";import"./BindType-BmZEZMMh.js";import"./getDefaultUnitForView-Cl7rPtCt.js";import"./plane-BL9J6YX0.js";import"./mat3f64-BBpwCtoL.js";import"./quatf64-BrpT0VRp.js";import"./lineSegment-C2OVzbAD.js";import"./geodesicAreaMeasurementUtils-BGWtxsMO.js";import"./geometryEngine-C92iiwvG.js";import"./geometryEngineBase-RmbNeFm7.js";import"./_commonjsHelpers-DCkdB7M8.js";import"./hydrated-CEL7VY_R.js";import"./geodesicUtils-BPlO99Nt.js";import"./ViewingMode-Dodu7ZZk.js";import"./boundedPlane-MAPkm7Yi.js";import"./verticalOffsetUtils-Bq_pVrum.js";import"./mat3-Ck4GO2qT.js";import"./earcut-BqgeR2O3.js";import"./elevationInfoUtils-JmMUMmCn.js";import"./geometry2dUtils-D5ud2BJg.js";import"./Cyclical-CEj-eenM.js";import"./unitFormatUtils-BYvkXWcg.js";import"./ByteSizeUnit-BsxeN7wM.js";import"./VisualElement-B9pa0AX0.js";import"./jsxFactory-DmHi7Kb2.js";import"./uuid-fwrPAdZb.js";import"./TextOverlayItem-Cvq2gm7v.js";import"./RenderGeometry-CQQOC_nW.js";import"./vec3f32-Cw9Q6TO_.js";import"./DoubleArray-tnpOy9RK.js";import"./Util-HYkJg9Vp.js";import"./computeTranslationToOriginAndRotation-B9BchKSd.js";import"./hydratedFeatures-DcIGyuBL.js";import"./frustum-Tc8kkw3_.js";import"./axisAngleDegrees-jEN9n05M.js";import"./quat-DrJsq_-D.js";import"./weather-CSMUgeU9.js";import"./Scheduler-Bg_fxWwI.js";import"./signal-CpmfLcHB.js";import"./debugFlags-Cr0sx6r_.js";import"./Float4DrawUniform-X0Lc1Ix0.js";import"./NestedMap-DgiGbX8E.js";import"./basicInterfaces-wONHx_SN.js";import"./Octree-lrGXb_0y.js";import"./InterleavedLayout-ZKuAjCiK.js";import"./BufferView-XrMc2vJu.js";import"./types-D0PSWh4d.js";import"./floatRGBA-DZ6CgOhi.js";import"./Texture-BF0Xf23l.js";import"./Intersector-CG5xfiNM.js";import"./glUtil-C6KhMg1m.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./VertexArrayObject-9V6uZ6_q.js";import"./BufferObject-CWTeBz1x.js";import"./doublePrecisionUtils-B0owpBza.js";import"./requestImageUtils-Cd7mPI4y.js";import"./triangulationUtils-BSy4A0L9.js";import"./deduplicate-CREmZpKM.js";function Me(t,e,i,s,r){Ve(k,t),te(j,t,e),H(k,i,k,r),H(j,i,j,r),T(s,j,k),xe(s,s)}const k=u(),j=u();class oi{get numVertices(){return this._length}get hasStagedVertex(){return this._hasCursorPoint}constructor(e){this.validMeasurement=!1,this.positionsWorld=[],this.positionsRender=[],this.positionsFittedWorld=[],this.positionsFittedRender=[],this.positionsGeodesic=[],this.positionsSpherical=[],this.positionsStereographic=[],this.pathSegmentLengths=[],this.geodesicPathSegmentLengths=[],this.perimeterSegmentLengths=[],this.intersectingSegments=new Set,this.geodesicIntersectingSegments=new Set,this.triangleIndices=null,this.geodesicTriangleIndices=null,this.areaCentroidWorldCoords=u(),this.areaCentroidRenderCoords=u(),this.geodesicAreaCentroidRenderCoords=u(),this.fittingMode=null,this.area=null,this.geodesicArea=null,this.pathLength=null,this.geodesicPathLength=null,this.perimeterLength=null,this._length=0,this._centroidRenderCoords=u(),this._planeWorldCoords=Ie(),this._worldUp=u(),this._worldTangent=u(),this._frame=[u(),u(),u()],this._pathVersion=-1,this._hasCursorPoint=!1,this._mode=null,this._tempU=u(),this._tempV=u(),this._tempVec3=u(),this._tempSphere=ut(),this._sceneView=e;const i=St(e.spatialReference);this._measurementSR=i,this._lengthMeasurementUnit=Ge(i)??"meters",this._areaMeasurementUnit=Te(i)??"square-meters"}update(e,i,s,r,n,a){const o=i!=null,h=this._pathVersion===e.version,c=this._hasCursorPoint===o,p=this._mode===n;return!(h&&!a&&c&&p&&e.isValidPolygon)&&(this._pathVersion=e.version,this._hasCursorPoint=o,this._updateCursorSegmentLength(e,i),this._update(e,i,s,r,n),!0)}_update(e,i,s,r,n){const a=this._sceneView.renderSpatialReference,o=this._measurementSR,h=s.spatialReference;let c=e.numVertices;const p=!(i==null||i.equals(e.lastPoint)||c>2&&i.equals(e.firstPoint));p&&(c+=1);const m=!e.polygonIsClosed&&c>2,v=e.polygonIsClosed||m;this._resize(c);const f=ve(h),_=h!=null&&bt(h)?h:null,b=_!=null&&ze(h,f),{positionsGeodesic:w,positionsWorld:z,positionsRender:F,positionsSpherical:S}=this,A=(L,C)=>{ai(s.elevationProvider,L),W(L,z[C],o),W(L,F[C],a),b&&(W(L,w[C],_),W(L,S[C],f),xe(S[C],S[C]))};e.forEachVertexPosition((L,C)=>A(L,C)),p&&A(i,c-1);const G=this._updatePathLengths(v);if(this.pathLength=this._length>1?Q(G,this._lengthMeasurementUnit):null,b){const L=this._updateGeodesicPathLengths(v,_);this.geodesicPathLength=L!=null&&this._length>1?L:null}else this.geodesicPathLength=null;if(this._updateMode(n),!v)return this.area=null,this.geodesicArea=null,this.perimeterLength=null,this.triangleIndices=null,this.geodesicTriangleIndices=null,this.intersectingSegments.clear(),this.geodesicIntersectingSegments.clear(),void(this.validMeasurement=!1);this._updateAreaAndPerimeterLength(s,a,o,r),b&&this._updateGeodesicArea(s,_),this.validMeasurement=!0}getData(){return{validMeasurement:this.validMeasurement,numVertices:this.numVertices,hasStagedVertex:this.hasStagedVertex,positionsRender:this.positionsRender,positionsFittedWorld:this.positionsFittedWorld,positionsFittedRender:this.positionsFittedRender,intersectingSegments:this.intersectingSegments,geodesicIntersectingSegments:this.geodesicIntersectingSegments,triangleIndices:this.triangleIndices,geodesicTriangleIndices:this.geodesicTriangleIndices,areaCentroidRenderCoords:this.areaCentroidRenderCoords,geodesicAreaCentroidRenderCoords:this.geodesicAreaCentroidRenderCoords,area:this.area,geodesicArea:this.geodesicArea,pathLength:this.pathLength,geodesicPathLength:this.geodesicPathLength,perimeterLength:this.perimeterLength,actualMeasurementMode:this.actualMeasurementMode}}_resize(e){for(e<this._length&&(this.positionsWorld.length=e,this.positionsRender.length=e,this.positionsFittedWorld.length=e,this.positionsFittedRender.length=e,this.positionsGeodesic.length=e,this.positionsSpherical.length=e,this.positionsStereographic.length=e,this.pathSegmentLengths.length=e,this.geodesicPathSegmentLengths.length=e,this.perimeterSegmentLengths.length=e,this._length=e);this._length<e;)this.positionsWorld.push(u()),this.positionsRender.push(u()),this.positionsFittedWorld.push(ye()),this.positionsFittedRender.push(u()),this.positionsGeodesic.push(u()),this.positionsSpherical.push(u()),this.positionsStereographic.push(ye()),this.pathSegmentLengths.push(0),this.geodesicPathSegmentLengths.push(0),this.perimeterSegmentLengths.push(0),++this._length}_updatePathLengths(e){const i=this.positionsWorld,s=this.pathSegmentLengths;let r=0;const n=this._length;for(let a=0;a<n;++a){const o=s[a]=Fe(i[a],i[(a+1)%n]);(a<n-1||e)&&(r+=o)}return r}_updateGeodesicPathLengths(e,i){const s=this.positionsGeodesic,r=this.geodesicPathSegmentLengths;let n=0;const a=this._length;for(let o=0;o<a;++o){const h=Pt(s[o],s[(o+1)%a],i);if(h==null)return null;const c=re(h,"meters").value,p=r[o]=c;(o<a-1||e)&&(n+=p)}return Q(n,"meters")}_updateAreaAndPerimeterLength(e,i,s,r){const n=e.renderCoordsHelper,a=this.positionsWorld,o=this.positionsRender,h=this.positionsFittedWorld,c=this.positionsFittedRender,p=this._planeWorldCoords,m=this._centroidRenderCoords;ne(o,m),n.worldUpAtPosition(m,this._worldUp),n.worldBasisAtPosition(m,We.X,this._worldTangent),Me(m,this._worldUp,i,this._worldUp,s),Me(m,this._worldTangent,i,this._worldTangent,s),a.length>2&&gt(a,p),this.fittingMode=this._selectFittingMode(p,a,this._worldUp,r);let v=0;if(this.fittingMode==="horizontal"){let S=-1/0;o.forEach((A,G)=>{const L=n.getAltitude(o[G]);L>S&&(S=L,v=G)})}const f=a[v];let _=p,b=this._worldTangent;this.fittingMode==="horizontal"?_=this._worldUp:this.fittingMode==="vertical"&&(_=this._tempVec3,b=this._worldUp,Le(p,this._worldUp,_)),Ve(this._frame[2],_),Le(b,_,this._frame[0]),Ue(this._frame[1],this._frame[0],this._frame[2]),ke(this._frame[1],this._frame[1]);const w=this._tempVec3,z=this._tempU,F=this._tempV;for(let S=0;S<this._length;++S){const A=h[S],G=c[S];T(w,a[S],f),fe(A,D(this._frame[0],w),D(this._frame[1],w)),K(z,this._frame[0],A[0]),K(F,this._frame[1],A[1]),te(w,z,F),te(w,w,f),H(w,s,G,i)}this.perimeterLength=this._length>0?this._updatePerimeterLengths():null,ne(c,this.areaCentroidRenderCoords),H(this.areaCentroidRenderCoords,i,this.areaCentroidWorldCoords,s),this._updateIntersectingSegments(),this.area=this.intersectingSegments.size===0?this._computeArea():null}_updateGeodesicArea(e,i){const{renderCoordsHelper:s,spatialReference:r}=e,{positionsSpherical:n,positionsStereographic:a}=this,o=this._tempVec3,h=_t(n,o);if(!h)return void(this.geodesicArea=null);const c=this._tempU,p=this._tempV;Lt(o,c,p);for(let m=0;m<this._length;++m){const v=D(n[m],c),f=D(n[m],p),_=D(n[m],o);fe(a[m],v/_,f/_)}K(o,o,je(r).radius),s.toRenderCoords(o,ve(r),this.geodesicAreaCentroidRenderCoords),this._updateGeodesicIntersectingSegments(),this.geodesicArea=h&&this.geodesicIntersectingSegments.size===0?this._computeGeodesicArea(i):null}_updatePerimeterLengths(){const e=this.positionsFittedWorld,i=this.perimeterSegmentLengths;let s=0;for(let r=0;r<this._length;++r)s+=i[r]=ct(e[r],e[(r+1)%this._length]);return Q(s,this._lengthMeasurementUnit)}_updateIntersectingSegments(){const e=this.positionsFittedWorld,i=this.intersectingSegments;i.clear();for(let s=0;s<this._length;++s)for(let r=s+2;r<this._length;++r){if((r+1)%this._length===s)continue;const n=e[s],a=e[(s+1)%this._length],o=e[r],h=e[(r+1)%this._length];ae(n,a,o,h)&&(i.add(s),i.add(r))}}_computeArea(){const e=this.positionsFittedWorld,i=this.triangleIndices=we(Se(e));let s=0;for(let r=0;r<i.length;r+=3)s+=mt(e[i[r]],e[i[r+1]],e[i[r+2]]);return _e(s,this._areaMeasurementUnit)}_updateGeodesicIntersectingSegments(){const e=this.positionsStereographic,i=this.geodesicIntersectingSegments;i.clear();for(let s=0;s<this._length;++s)for(let r=s+2;r<this._length;++r){if((r+1)%this._length===s)continue;const n=e[s],a=e[(s+1)%this._length],o=e[r],h=e[(r+1)%this._length];ae(n,a,o,h)&&(i.add(s),i.add(r))}}_computeGeodesicArea(e){const i=this.positionsGeodesic,s=this.positionsStereographic,r=this.geodesicTriangleIndices=we(Se(s));let n=0;for(let a=0;a<r.length;a+=3){const o=ft(i[r[a]],i[r[a+1]],i[r[a+2]],e);if(o==null)return null;n+=re(o,"square-meters").value}return _e(n,"square-meters")}_selectFittingMode(e,i,s,r){const n=i.map(p=>Math.abs(yt(e,p))).reduce((p,m)=>Math.max(p,m),0);vt(i,this._tempSphere);const a=n/(2*this._tempSphere[3]),o=a<r.maxRelativeErrorCoplanar,h=a<r.maxRelativeErrorAlmostCoplanar;let c="horizontal";return o?c="oblique":h&&(c=Math.abs(D(s,e))>Math.cos(qe(r.verticalAngleThreshold))?"horizontal":"vertical"),c}_updateCursorSegmentLength(e,i){var r;const s=e.lastPoint;e.isValidPolygon||s==null||i==null?(this.geodesicStagedSegmentLength=null,this.stagedSegmentLength=null):(this.geodesicStagedSegmentLength=Ct(s,i),this.stagedSegmentLength=(r=$t(s,i))==null?void 0:r.direct)}_updateMode(e){if(e===se.Auto){this.actualMeasurementMode="euclidean";let i=0;this.geodesicPathLength!=null&&(i+=this.geodesicPathLength.value),i>li&&(this.actualMeasurementMode="geodesic")}else this.actualMeasurementMode=e===se.Euclidean?"euclidean":"geodesic";this.geodesicPathLength==null&&(this.actualMeasurementMode="euclidean"),this._mode=e}}function ai(t,e){e.hasZ||(e.z=wt(t,e,"ground")??0)}const li=1e5;let R=class extends oe{constructor(e){super(e)}initialize(){this._measurementDataManager=new oi(this.view),this.addHandles([this.analysisViewData.path.on("change",()=>this._update()),O(()=>this.analysisViewData.stagedPoint,()=>this._update(),le),O(()=>this.analysisViewData.mode,()=>this._update(),le)]),this._update()}_update(e=!1){const{analysisViewData:i,view:s}=this,r={maxRelativeErrorCoplanar:.005,maxRelativeErrorAlmostCoplanar:.01,verticalAngleThreshold:80};this._measurementDataManager.update(i.path,i.stagedPoint,s,r,i.mode,e)&&(i.measurementData=this._measurementDataManager.getData())}};l([d({constructOnly:!0})],R.prototype,"view",void 0),l([d({constructOnly:!0})],R.prototype,"analysis",void 0),l([d({constructOnly:!0})],R.prototype,"analysisViewData",void 0),R=l([J("esri.views.3d.analysis.AreaMeasurement.support.AreaMeasurementController")],R);let $=class extends He.EventedAccessor{constructor(e={}){super(e),this._version=0,this._internalGeometryChange=!1,this._extent=he()}set areaMeasurement(e){this._set("areaMeasurement",e),e!=null&&this.view!=null&&this._initialize(e,this.view)}set view(e){this._set("view",e),e!=null&&this.areaMeasurement!=null&&this._initialize(this.areaMeasurement,e)}get constructed(){return this.areaMeasurement!=null&&this.view!=null}get version(){return this._version}get isEmptyPolygon(){return!this.constructed||this._editGeometry.components.length===0}get isValidPolygon(){return this.constructed&&this.polygonIsClosed}get extent(){if(this.constructed&&this._editGeometry.components.length>0&&this._editGeometry.components[0].vertices.length>0){const e=he(this._extent);return this.forEachVertex(i=>{Be(e,i.pos)}),e}return null}get spatialReference(){return this.constructed?this._editGeometry.coordinateHelper.spatialReference:null}_initialize(e,i){this.removeAllHandles(),this.addHandles(O(()=>e.geometry,()=>{this._updateEditGeometryFromModelGeometry(e,i)},ie)),this._makeDirty(!0)}_makeDirty(e=!1){this.notifyChange("polygonIsClosed"),this.notifyChange("isValidPolygon"),this.notifyChange("initialized"),this.notifyChange("extent"),e&&this.notifyChange("numVertices")}_updateEditGeometryFromModelGeometry(e,i){if(this._version++,this._internalGeometryChange)return;this.removeHandles("EditGeometry");let s=e.geometry;if(s!=null){const r=Ne(s,i.spatialReference);r==null&&Mt(e,s.spatialReference,Je.getLogger(this)),s=r}this._editGeometryOperations=s!=null?$e.fromGeometry(s,i.state.viewingMode):new $e(new At("polygon",Vt(!0,!1,i.spatialReference)),i.state.viewingMode),this._makeDirty(!0),this.emit("change"),this.addHandles(this._editGeometry.on("change",r=>{this._makeDirty(r.addedVertices!=null||r.removedVertices!=null),this._internalGeometryChange=!0,e.geometry=this.numVertices>0?this._editGeometry.geometry:null,this._internalGeometryChange=!1}),"EditGeometry")}get _editGeometry(){return this._editGeometryOperations.data}get vertices(){const e=[];return this.forEachVertex(i=>{e.push(i)}),e}get numVertices(){return this.constructed&&this._editGeometry.components.length>0?this._editGeometry.components[0].vertices.length:0}get polygonIsClosed(){return this._editGeometry.components.length>0&&this._editGeometry.components[0].isClosed()}get firstPoint(){if(this.constructed&&this._editGeometry.components.length>0){const e=this._editGeometry.components[0].getFirstVertex();if(e!=null)return this._editGeometry.coordinateHelper.vectorToPoint(e.pos)}return null}get lastPoint(){if(this.constructed&&this._editGeometry.components.length>0){const e=this._editGeometry.components[0].getLastVertex();if(e!=null)return this._editGeometry.coordinateHelper.vectorToPoint(e.pos)}return null}getVertex(e){if(!this.constructed||this._editGeometry.components.length===0||this._editGeometry.components[0].vertices.length===0)return null;const i=this._editGeometry.components[0].vertices[0];let s=i;do{if(s.index===e)return s;s=s.rightEdge.rightVertex}while(s!==i&&s!=null);return null}getVertexPositionAsPoint(e){return this._editGeometry.coordinateHelper.vectorToPoint(e.pos)}getVertexPositionAsPointFromIndex(e){return this._editGeometry.coordinateHelper.vectorToPoint(this.getVertex(e).pos)}forEachVertex(e){this.constructed&&this._editGeometry.components.length>0&&this._editGeometry.components[0].iterateVertices(e)}forEachVertexPosition(e){const i=this._editGeometry.coordinateHelper;this.forEachVertex((s,r)=>{i.vectorToPoint(s.pos,Ae),e(Ae,r)})}clear(){this.areaMeasurement!=null&&(this.areaMeasurement.geometry=null)}add(e){if(!this.constructed)return null;if(this._editGeometry.components.length===0){const s=this.view;this._editGeometry.components.push(new xt(s.spatialReference,s.state.viewingMode))}const i=this._editGeometryOperations.appendVertex(this._editGeometry.coordinateHelper.pointToVector(e));return this.emit("change"),i}close(){if(!this.constructed||this._editGeometry.components.length===0)return null;const e=this._editGeometryOperations.closeComponent(this._editGeometry.components[0]);return this.emit("change"),e}ensureContains(e,i=""){let s=!1;if(this._editGeometry.components.forEach(r=>{r.iterateVertices(n=>{n===e&&(s=!0)})}),!s)throw new Error(`vertex doesnt exist ${i}`);return s}setVertexPosition(e,i){if(!this.constructed)return null;const s=this._editGeometryOperations.setVertexPosition(e,this._editGeometry.coordinateHelper.pointToVector(i));return this.emit("change"),s}equals(e){if(this.numVertices!==e.numVertices)return!1;let i=!0;return this.forEachVertexPosition((s,r)=>{const n=e.getVertexPositionAsPointFromIndex(r);s.equals(n)||(i=!1)}),!!i}};l([d({value:null})],$.prototype,"areaMeasurement",null),l([d({value:null})],$.prototype,"view",null),l([d()],$.prototype,"isEmptyPolygon",null),l([d()],$.prototype,"isValidPolygon",null),l([d()],$.prototype,"extent",null),l([d()],$.prototype,"spatialReference",null),l([d()],$.prototype,"numVertices",null),l([d()],$.prototype,"polygonIsClosed",null),$=l([J("esri.views.3d.analysis.AreaMeasurement.support.AreaMeasurementPathHelper")],$);const Ae=new Ze;function Oe(t){const e=new Et,{vertex:i,fragment:s}=e;return It(i,t),e.attributes.add(B.POSITION,"vec3"),e.attributes.add(B.UV0,"vec2"),e.varyings.add("vUV","vec2"),t.multipassEnabled&&e.varyings.add("depth","float"),i.code.add(ee`
    void main(void) {
      vUV = uv0;
      ${t.multipassEnabled?"depth = (view * vec4(position, 1.0)).z;":""}
      gl_Position = proj * view * vec4(position, 1.0);
    }
  `),e.include(Tt,t),s.uniforms.add(new zt("size",r=>r.size)),s.uniforms.add(new Ce("color1",r=>r.color1)),s.uniforms.add(new Ce("color2",r=>r.color2)),s.include(Ft),t.transparencyPassType===E.ColorAlpha&&(e.outputs.add("fragColor","vec4",0),e.outputs.add("fragAlpha","float",1)),s.code.add(ee`
    void main() {
      ${t.multipassEnabled?"terrainDepthTest(depth);":""}
      vec2 uvScaled = vUV / (2.0 * size);

      vec2 uv = fract(uvScaled - 0.25);
      vec2 ab = clamp((abs(uv - 0.5) - 0.25) / fwidth(uvScaled), -0.5, 0.5);
      float fade = smoothstep(0.25, 0.5, max(fwidth(uvScaled.x), fwidth(uvScaled.y)));
      float t = mix(abs(ab.x + ab.y), 0.5, fade);

      fragColor = mix(color2, color1, t);
      ${t.transparencyPassType===E.ColorAlpha?ee`
              fragColor = premultiplyAlpha(fragColor);
              fragAlpha = fragColor.a;`:""}
    }
  `),e}const hi=Object.freeze(Object.defineProperty({__proto__:null,build:Oe},Symbol.toStringTag,{value:"Module"}));class Z extends Ut{initializeProgram(e){return new kt(e.rctx,Z.shader.get().build(this.configuration),Kt)}_setPipelineState(e){const i=this.configuration,s=e===E.NONE,r=e===E.FrontFace;return ii({blending:i.transparent?s?ci:jt(e):null,depthTest:{func:qt(e)},depthWrite:s?i.writeDepth?si:null:Ht(e),drawBuffers:Bt(e),colorWrite:ri,polygonOffset:s||r?i.polygonOffset?di:null:{factor:-1,units:-25}})}initializePipeline(){return this._setPipelineState(this.configuration.transparencyPassType)}}Z.shader=new Wt(hi,()=>Ke(()=>Promise.resolve().then(()=>$i),void 0));const di={factor:0,units:-25},ci=ti(U.SRC_ALPHA,U.ONE,U.ONE_MINUS_SRC_ALPHA,U.ONE_MINUS_SRC_ALPHA);class M extends Nt{constructor(){super(...arguments),this.transparencyPassType=E.NONE,this.transparent=!1,this.writeDepth=!0,this.polygonOffset=!1,this.multipassEnabled=!1,this.cullAboveGround=!1}}l([V({count:E.COUNT})],M.prototype,"transparencyPassType",void 0),l([V()],M.prototype,"transparent",void 0),l([V()],M.prototype,"writeDepth",void 0),l([V()],M.prototype,"polygonOffset",void 0),l([V()],M.prototype,"multipassEnabled",void 0),l([V()],M.prototype,"cullAboveGround",void 0),l([V({constValue:!1})],M.prototype,"occlusionPass",void 0);class pi extends ei{constructor(e){super(e,new mi),this.produces=new Map([[X.OPAQUE_MATERIAL,i=>Y(i)&&!this.parameters.transparent],[X.TRANSPARENT_MATERIAL,i=>Y(i)&&this.parameters.transparent&&this.parameters.writeDepth],[X.TRANSPARENT_DEPTH_WRITE_DISABLED_MATERIAL,i=>Y(i)&&this.parameters.transparent&&!this.parameters.writeDepth]]),this._configuration=new M}getConfiguration(e,i){return this._configuration.transparent=this.parameters.transparent,this._configuration.writeDepth=this.parameters.writeDepth,this._configuration.polygonOffset=this.parameters.polygonOffset,this._configuration.transparencyPassType=i.transparencyPassType,this._configuration.multipassEnabled=i.multipassEnabled,this._configuration.cullAboveGround=i.multipassTerrain.cullAboveGround,this._configuration}createGLMaterial(e){return new ui(e)}createBufferWriter(){return new Xt(Yt)}}class ui extends Jt{beginSlot(e){return this.ensureTechnique(Z,e)}}let mi=class extends Qt{constructor(){super(...arguments),this.size=De(1,1),this.color1=q(.75,.75,.75,1),this.color2=q(.5,.5,.5,1),this.transparent=!1,this.writeDepth=!0,this.polygonOffset=!1}};class gi extends Ot{constructor(e){super(e),this._checkerBoardMaterial=null,this._renderOccluded=x.OccludeAndTransparent,this._geometry=null,this._size=De(1,1),this._color1=q(1,.5,0,.5),this._color2=q(1,1,1,.5),this.applyProperties(e)}get renderOccluded(){return this._renderOccluded}set renderOccluded(e){e!==this._renderOccluded&&(this._renderOccluded=e,this._updateMaterial())}get geometry(){return this._geometry}set geometry(e){this._geometry=e,this.recreateGeometry()}get size(){return this._size}set size(e){pt(this._size,e),this._updateMaterial()}get color1(){return this._color1}set color1(e){de(e,this._color1)||(ce(this._color1,e),this._updateMaterial())}get color2(){return this._color2}set color2(e){de(e,this._color2)||(ce(this._color2,e),this._updateMaterial())}_updateMaterial(){this._checkerBoardMaterial!=null&&this._checkerBoardMaterial.setParameters({size:this._size,color1:this._color1,color2:this._color2,renderOccluded:this._renderOccluded})}createExternalResources(){this._checkerBoardMaterial=new pi({size:this._size,color1:this._color1,color2:this._color2,transparent:!0,writeDepth:!1,polygonOffset:!0,renderOccluded:x.OccludeAndTransparent,isDecoration:this.isDecoration})}destroyExternalResources(){this._checkerBoardMaterial=null}forEachExternalMaterial(e){this._checkerBoardMaterial!=null&&e(this._checkerBoardMaterial)}createGeometries(e){if(this._geometry==null||this._checkerBoardMaterial==null)return;const i=_i;Qe(i,this.transform);const s=this._geometry,r=[],n=u();s.position.forEach(h=>{T(n,h,i),r.push(n[0],n[1],n[2])});const a=[];s.uv.forEach(h=>{a.push(h[0],h[1])});const o=new Zt(this._checkerBoardMaterial,[[B.POSITION,new Pe(r,s.triangleIndices,3,!0)],[B.UV0,new Pe(a,s.triangleIndices,2,!0)]]);e.addGeometry(o)}}const _i=u();let y=class extends oe{get _parameters(){const{accentColor:t,textColor:e}=this.view.effectiveTheme,i=Xe(t),s=pe(t,.5),r=pe(ue(t),.5),n=ue(e,Ye.Low);return{accentColor:i,transparentAccentColor:s,transparentContrastColor:r,intersectingLineColor:[1,.2,0,1],textColor:e,textBackgroundColor:me(n,.6),textCalloutColor:me(n,.5),pathLineWidth:3,perimeterLineWidth:2,projectionLineWidth:2,projectionLineStippleSize:5,labelDistance:25}}get visible(){return this.analysisViewData.visible}get _renderUnits(){const t=this.view.renderCoordsHelper.spatialReference;return Ge(t)??"meters"}get testData(){}constructor(t){super(t),this._path=null,this._intersectedPath=null,this._perimeter=null,this._intersectedPerimeter=null,this._projectionLines=null,this._measurementArea=null,this._areaLabel=null,this._perimeterLengthLabel=null,this._pathSegments=[],this._perimeterSegments=[],this._origin=u(),this._originTransform=Gt(),this.messages=null,this.viewData=Si,this.areaLabel=null,this.perimeterLengthLabel=null,this.loadingMessages=!0}initialize(){const{analysisViewData:t,_parameters:e,view:i}=this;this._path=new I({view:i,attached:!0,width:e.pathLineWidth,polygonOffset:!0,renderOccluded:x.OccludeAndTransparent,isDecoration:!0}),this._intersectedPath=new I({view:i,attached:!0,width:e.pathLineWidth,polygonOffset:!0,renderOccluded:x.OccludeAndTransparent,isDecoration:!0}),this._perimeter=new I({view:i,attached:!0,width:e.perimeterLineWidth,polygonOffset:!0,renderOccluded:x.OccludeAndTransparent,isDecoration:!0}),this._intersectedPerimeter=new I({view:i,attached:!0,width:e.perimeterLineWidth,color:e.intersectingLineColor,polygonOffset:!0,renderOccluded:x.OccludeAndTransparent,isDecoration:!0}),this._projectionLines=new I({view:i,attached:!0,width:e.projectionLineWidth,stipplePattern:ni(e.projectionLineStippleSize),polygonOffset:!0,renderOccluded:x.OccludeAndTransparent,isDecoration:!0}),this._measurementArea=new gi({view:i,attached:!0,isDecoration:!0});const s={attached:!0,view:i,isDecoration:!0};this._areaLabel=new be({...s,fontSize:N.Large}),this._perimeterLengthLabel=new be({...s,fontSize:N.Small}),this.addHandles([O(()=>[t.mode,this.visible,t.unit,t.measurementData,t.stagedPoint],()=>this._update(),ie),O(()=>{var r;return(r=i.state)==null?void 0:r.camera},()=>this._updateLabels(),ie),et(()=>this._updateMessageBundle()),O(()=>this._parameters,({accentColor:r,transparentAccentColor:n,transparentContrastColor:a,textColor:o,textBackgroundColor:h,textCalloutColor:c})=>{const{_path:p,_intersectedPath:m,_perimeter:v,_projectionLines:f,_measurementArea:_,_areaLabel:b,_perimeterLengthLabel:w}=this;p.color=r,m.color=r,v.color=r,f.color=r,_.color1=n,_.color2=a,b.textColor=o,b.backgroundColor=h,b.calloutColor=c,w.textColor=o,w.backgroundColor=h,w.calloutColor=c},tt)]),this._updateMessageBundle()}destroy(){this._measurementArea=P(this._measurementArea),this._path=P(this._path),this._intersectedPath=P(this._intersectedPath),this._perimeter=P(this._perimeter),this._intersectedPerimeter=P(this._intersectedPerimeter),this._areaLabel=P(this._areaLabel),this._perimeterLengthLabel=P(this._perimeterLengthLabel),this._projectionLines=P(this._projectionLines),this.set("view",null)}_update(){if(this.destroyed||!this.view.ready||!this.view.renderCoordsHelper)return;const{analysisViewData:{measurementData:t},analysisViewData:e}=this;t!=null&&(this._updateViewData(t,e.path),this._updateOrigin(),this._updatePathSegments(),this._updatePerimeterSegments(),this._updateArea(),this._updateProjectionLines(),this._updateLabels())}_updateViewData(t,e){const i=t.validMeasurement,s=t.actualMeasurementMode==="geodesic",r=s?t.geodesicArea:t.area;let n=1;if(r){const o=yi(r,this.analysisViewData.unit);n=it(Math.sqrt(o.value)/Math.sqrt(300)),n*=Math.sqrt(ge(1,o.unit,"square-meters")),n=ge(n,"meters",this._renderUnits)}const a={validMeasurement:i,numVertices:t.numVertices,hasStagedVertex:t.hasStagedVertex,path:e,mode:t.actualMeasurementMode,positionsRender:t.positionsRender,positionsFittedWorld:t.positionsFittedWorld,positionsFittedRender:t.positionsFittedRender,intersectingSegments:s?t.geodesicIntersectingSegments:t.intersectingSegments,triangleIndices:s?t.geodesicTriangleIndices:t.triangleIndices,areaCentroid:s?t.geodesicAreaCentroidRenderCoords:t.areaCentroidRenderCoords,perimeterLengthLabelSegmentIndex:0,area:s?t.geodesicArea:t.area,pathLength:s?t.geodesicPathLength:t.pathLength,perimeterLength:t.perimeterLength,checkerSize:n};this._set("viewData",a)}_updateOrigin(){const t=this.viewData;ne(t.positionsRender,this._origin),st(this._originTransform,this._origin),this._measurementArea.transform=this._originTransform,this._projectionLines.transform=this._originTransform}_createSegments(t){const e=this.viewData,i=this.view.renderCoordsHelper.spatialReference,s=e.mode,r=[],n=[],a=[],o=e.numVertices,h=e.validMeasurement?o:o-1;for(let p=0;p<h;++p){const m=e[t][p],v=e[t][(p+1)%o];let f=null;switch(s){case"euclidean":f=new Rt(m,v);break;case"geodesic":f=new Dt(m,v,i)}e.intersectingSegments.has(p)?a.push(f):n.push(f),r.push(f)}let c=null;return e.validMeasurement&&e.hasStagedVertex&&h>=2?c=r[r.length-2]:e.hasStagedVertex&&h>=1&&(c=r[r.length-1]),{all:r,nonIntersecting:n,intersecting:a,stagedSegment:c}}_updatePathSegments(){const{visible:t}=this,e=this._createSegments("positionsRender");this._path.setGeometryFromSegments(e.nonIntersecting,this._origin),this._path.visible=t,this._intersectedPath.setGeometryFromSegments(e.intersecting,this._origin),this._intersectedPath.visible=t,this._pathSegments=e.all}_updatePerimeterSegments(){const t=this.visible&&this.viewData.mode==="euclidean",e=this._createSegments("positionsFittedRender");this._perimeter.setGeometryFromSegments(e.nonIntersecting,this._origin),this._perimeter.visible=t,this._intersectedPerimeter.setGeometryFromSegments(e.intersecting,this._origin),this._intersectedPerimeter.visible=t,this._perimeterSegments=e.all}_updateArea(){const t=this.viewData;switch(t.mode){case"euclidean":this._updateAreaEuclidean(t);break;case"geodesic":this._updateAreaGeodesic()}}_updateAreaEuclidean(t){const e=this.visible;t.validMeasurement&&t.intersectingSegments.size===0&&t.triangleIndices?(this._measurementArea.geometry={uv:t.positionsFittedWorld,position:t.positionsFittedRender,triangleIndices:t.triangleIndices},this._measurementArea.size=[t.checkerSize,t.checkerSize],this._measurementArea.visible=e):this._measurementArea.visible=!1}_updateAreaGeodesic(){this._measurementArea.visible=!1}_updateProjectionLines(){const t=this.viewData,e=this.visible,i=t.mode,s=t.numVertices;if(s>0&&t.validMeasurement&&i==="euclidean"){const r=[];for(let n=0;n<s;++n){const a=u();T(a,t.positionsRender[n],this._origin);const o=u();T(o,t.positionsFittedRender[n],this._origin),r.push([a,o])}this._projectionLines.geometry=r,this._projectionLines.visible=e}else this._projectionLines.geometry=null,this._projectionLines.visible=!1}_updateLabels(){if(this.destroyed)return;const{viewData:t}=this,{area:e,path:i}=t;if(!i)return;const s=this.visible,r=fi(this.messages,e,this.analysisViewData.unit);if(r!=null?(this._areaLabel.geometry={type:"point",point:t.areaCentroid},this._areaLabel.text=r,this._areaLabel.visible=t.validMeasurement&&t.intersectingSegments.size===0&&s):this._areaLabel.visible=!1,this._set("areaLabel",r),t.validMeasurement&&t.intersectingSegments.size===0){const n=t.mode==="geodesic"||!t.validMeasurement,a=n?t.pathLength:t.perimeterLength,o=vi(this.messages,a,this.analysisViewData.unit);this._set("perimeterLengthLabel",o),this._perimeterLengthLabel.distance=this._parameters.labelDistance,this._perimeterLengthLabel.anchor="top",this._perimeterLengthLabel.text=o,this._perimeterLengthLabel.visible=!0;let h=!0;for(let c=0;c<t.numVertices;++c){const p=(t.perimeterLengthLabelSegmentIndex+c)%t.numVertices,m=n?this._pathSegments[p]:this._perimeterSegments[p];if(h=!0,this._perimeterLengthLabel.geometry={type:"segment",segment:m,sampleLocation:"center"},!this._perimeterLengthLabel.overlaps(this._areaLabel))break;h=!1}this._perimeterLengthLabel.visible=h&&s}else this._perimeterLengthLabel.visible=!1}_updateMessageBundle(){this.loadingMessages=!0,rt("esri/core/t9n/Units").then(t=>{this.messages=t,this.view&&this._update()}).finally(()=>{this.loadingMessages=!1})}};function fi(t,e,i){return t&&e&&Re(t,e,Ee(e,i))}function yi(t,e){return re(t,Ee(t,e))}function Ee(t,e){switch(e){case"metric":return ot(t.value,t.unit);case"imperial":return nt(t.value,t.unit);default:return e}}function vi(t,e,i){return t&&e&&Re(t,e,wi(e,i))}function wi(t,e){const i=Li(e);switch(i){case"metric":return lt(t.value,t.unit);case"imperial":return at(t.value,t.unit);default:return i}}function Li(t){switch(t){case"metric":case"ares":case"hectares":return"metric";case"imperial":case"acres":return"imperial";case"square-inches":return"inches";case"square-feet":return"feet";case"square-yards":return"yards";case"square-miles":return"miles";case"square-us-feet":return"us-feet";case"square-millimeters":return"millimeters";case"square-centimeters":return"centimeters";case"square-decimeters":return"decimeters";case"square-meters":return"meters";case"square-kilometers":return"kilometers"}throw new Error("unhandled area unit")}var N;l([d()],y.prototype,"_parameters",null),l([d()],y.prototype,"view",void 0),l([d()],y.prototype,"messages",void 0),l([d()],y.prototype,"analysis",void 0),l([d()],y.prototype,"viewData",void 0),l([d()],y.prototype,"analysisViewData",void 0),l([d({readOnly:!0})],y.prototype,"areaLabel",void 0),l([d({readOnly:!0})],y.prototype,"perimeterLengthLabel",void 0),l([d()],y.prototype,"loadingMessages",void 0),l([d()],y.prototype,"visible",null),l([d()],y.prototype,"_renderUnits",null),y=l([J("esri.views.3d.analysis.AreaMeasurement.support.AreaMeasurementVisualization")],y),function(t){t[t.Small=12]="Small",t[t.Large=16]="Large"}(N||(N={}));const Si={validMeasurement:!1,numVertices:0,hasStagedVertex:!1,path:null,mode:null,positionsRender:null,positionsFittedWorld:null,positionsFittedRender:null,intersectingSegments:null,triangleIndices:null,areaCentroid:null,perimeterLengthLabelSegmentIndex:null,checkerSize:null,area:null,pathLength:null,perimeterLength:null};let g=class extends dt(oe){constructor(t){super(t),this.type="area-measurement-view-3d",this.analysis=null,this.measurementData=null,this.lastDraggedVertex=null,this.stagedPoint=null,this.mode=se.Auto}initialize(){const{analysis:t,view:e}=this;this.path=new $({view:e,areaMeasurement:t}),this.analysisVisualization=new y({view:e,analysis:t,analysisViewData:this}),this.analysisController=new R({view:e,analysis:t,analysisViewData:this})}destroy(){this.analysisController=P(this.analysisController),this.analysisVisualization=P(this.analysisVisualization),this.path.destroy()}get updating(){var t;return!!((t=this.analysisVisualization)!=null&&t.loadingMessages)}get result(){const{measurementData:t}=this;return t==null?{area:null,mode:null,perimeter:null}:t.actualMeasurementMode==="euclidean"?{area:t.area,perimeter:t.perimeterLength,mode:"euclidean"}:{area:t.geodesicArea,perimeter:t.pathLength,mode:"geodesic"}}get viewData(){return this.analysisVisualization.viewData}get validMeasurement(){return this.path.isValidPolygon}get unit(){return this.analysis.unit??this._defaultUnit}get testData(){}};l([d({readOnly:!0})],g.prototype,"type",void 0),l([d({constructOnly:!0,nonNullable:!0})],g.prototype,"analysis",void 0),l([d()],g.prototype,"updating",null),l([d()],g.prototype,"analysisVisualization",void 0),l([d()],g.prototype,"analysisController",void 0),l([d()],g.prototype,"result",null),l([d()],g.prototype,"measurementData",void 0),l([d()],g.prototype,"viewData",null),l([d()],g.prototype,"validMeasurement",null),l([d()],g.prototype,"path",void 0),l([d()],g.prototype,"lastDraggedVertex",void 0),l([d()],g.prototype,"stagedPoint",void 0),l([d()],g.prototype,"mode",void 0),l([d()],g.prototype,"unit",null),l([d(ht)],g.prototype,"_defaultUnit",void 0),g=l([J("esri.views.3d.analysis.AreaMeasurementAnalysisView3D")],g);const gr=g,$i=Object.freeze(Object.defineProperty({__proto__:null,build:Oe},Symbol.toStringTag,{value:"Module"}));export{gr as default};

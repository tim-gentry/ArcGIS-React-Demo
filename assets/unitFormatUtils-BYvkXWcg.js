import{E as g}from"./ByteSizeUnit-BsxeN7wM.js";import{a as M}from"./Cyclical-CEj-eenM.js";import{bA as s,aF as c,er as D,es as F,et as d,eu as h,aE as w,bn as S,ev as x,ew as y}from"./index-DX0rcHuW.js";import{m as T}from"./quantityUtils-DSpmykXR.js";function B(r,t,n){return r.units[t][n]}function u(r,t,n,e=2,o="abbr"){return`${c(t,{minimumFractionDigits:e,maximumFractionDigits:e,signDisplay:t>0?"never":"exceptZero"})} ${B(r,n,o)}`}function b(r,t,n,e=2,o="abbr"){return`${c(t,{minimumFractionDigits:e,maximumFractionDigits:e,signDisplay:"exceptZero"})} ${B(r,n,o)}`}function z(r,t,n,e=2,o="abbr"){const i=D(t,n);return u(r,s(t,n,i),i,e,o)}function K(r,t,n,e=2,o="abbr"){const i=D(t,n);return b(r,s(t,n,i),i,e,o)}function j(r,t,n,e=2,o="abbr"){const i=x(t,n);return u(r,s(t,n,i),i,e,o)}function A(r,t,n,e=2,o="abbr"){const i=x(t,n);return b(r,s(t,n,i),i,e,o)}function J(r,t,n,e=2,o="abbr"){const i=F(t,n);return u(r,s(t,n,i),i,e,o)}function L(r,t,n,e=2,o="abbr"){const i=F(t,n);return b(r,s(t,n,i),i,e,o)}function N(r,t,n,e=2,o="abbr"){const i=y(t,n);return u(r,s(t,n,i),i,e,o)}function U(r,t,n,e=2,o="abbr"){const i=y(t,n);return b(r,s(t,n,i),i,e,o)}function Y(r,t,n,e=2,o="abbr"){const i=d(t,n);return u(r,s(t,n,i),i,e,o)}function k(r,t,n,e=2,o="abbr"){const i=h(t,n);return u(r,s(t,n,i),i,e,o)}const Z=(r,t)=>({style:"unit",unitDisplay:"narrow",unit:"degree",maximumFractionDigits:t,minimumFractionDigits:t,signDisplay:r>0?"never":"exceptZero"});function G(r,t,n,e,o,i=M,a=!0){let m=i.normalize(T(s(r,t,"degrees"),n,e),0,a);const f=Z(m,o??2);return m=$(m,f),c(m,f)}function q(r,t,n,e,o){n!==e&&(r=-r);const i={style:"unit",unitDisplay:"narrow",unit:"degree",maximumFractionDigits:o=o??2,minimumFractionDigits:o,signDisplay:"exceptZero"};let a=s(r,t,"degrees")%360;return a=$(a,i),c(a,i)}const l=new Map;function $(r,t){const n=JSON.stringify(t);let e=l.get(n);return e||(e=new Intl.NumberFormat("en-US",t),l.set(n,e)),/^[-+]?360\.?0*Â°?$/.test(e.format(r))?0:r}const p=["B","kB","MB","GB","TB"];function C(r,t){let n=(t=Math.round(t))===0?0:Math.floor(Math.log(t)/Math.log(g.KILOBYTES));n=S(n,0,p.length-1);const e=c(t/g.KILOBYTES**n,{maximumFractionDigits:2});return w(r.units.bytes[p[n]],{fileSize:e})}export{Y as $,N as B,z as D,A as F,U as M,C as T,q as Z,B as b,J as d,u as g,L as h,k as j,b as p,G as w,K as x,j as y};

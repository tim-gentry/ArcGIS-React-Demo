import{s as u,G as W,bY as m,fa as T,ck as A,f as E,ft as x,d0 as L,bq as M,d3 as I,n as V,ac as y,ad as b,ag as D,bp as f}from"./index-DX0rcHuW.js";import{n as P}from"./projectVectorToVector-DjKO2tJh.js";import{l as F}from"./LayerView3D-CLOjZQPa.js";import{l as $,o as s,i as w}from"./Viewshed.glsl-BfaJltDE.js";import{t as C}from"./WaterSurface.glsl-CB7boCuS.js";import{i as R}from"./PopupSceneLayerView-fzItebd0.js";import{y as U}from"./LayerView-C2s9lN61.js";import{c as z}from"./layerViewUtils-D2JqIDZ8.js";import"./projectPointToVector-6lqiVL77.js";import"./heightModelInfoUtils-CTi_JiJC.js";import"./HeightModelInfo-DaJXTLDg.js";import"./arcgisLayerUrl-BpJodxxk.js";import"./Viewpoint-sw4jiA6m.js";import"./Cyclical-CEj-eenM.js";import"./jsxFactory-DmHi7Kb2.js";import"./uuid-fwrPAdZb.js";import"./GraphicsCollection-BjA_qBYu.js";import"./boundedPlane-MAPkm7Yi.js";import"./sphere-COyqsaGw.js";import"./plane-BL9J6YX0.js";import"./mat3f64-BBpwCtoL.js";import"./mat4f64-Dk4dwAN8.js";import"./quatf64-BrpT0VRp.js";import"./vec2f64-Diu2Kaa8.js";import"./mathUtils-BsqbT0oM.js";import"./lineSegment-C2OVzbAD.js";import"./RenderCoordsHelper-D33jtR9v.js";import"./spatialReferenceEllipsoidUtils-Bv0mQCFg.js";import"./projectVectorToPoint-jxEu1YJy.js";import"./ElevationProvider-Xg9LKEp7.js";import"./ViewingMode-Dodu7ZZk.js";import"./verticalOffsetUtils-Bq_pVrum.js";import"./mat3-Ck4GO2qT.js";import"./orientedBoundingBox-BTwqkknQ.js";import"./quat-DrJsq_-D.js";import"./computeTranslationToOriginAndRotation-B9BchKSd.js";import"./scaleUtils-ClqQrarK.js";import"./DefaultUI-BM5o-ZLH.js";import"./UpdatingHandles-CERUeL1P.js";import"./InputManager-abOXR3ru.js";import"./signal-CpmfLcHB.js";import"./Map-BcseqEdU.js";import"./Basemap-CjElSnyL.js";import"./loadAll-8MiqgLTH.js";import"./writeUtils-RiCb1SCd.js";import"./Ground-dhRLerDt.js";import"./CollectionFlattener-Be8YW6oV.js";import"./editableLayers-DuIVmwOk.js";import"./catalogUtils-B2PovfNH.js";import"./basemapUtils-rjdIOXhY.js";import"./TablesMixin-CcZZ6esO.js";import"./ReactiveMap-r-vujrh9.js";import"./selectionUtils-DYi6daQO.js";import"./IViewEvents-Bci6PjlS.js";import"./interfaces-D6pIddIh.js";import"./screenUtils-BcEL8jIe.js";import"./a11yUtils-BcOnuh2m.js";import"./capabilities-C84AMSCg.js";import"./themeUtils-C3zvZbsE.js";import"./globalCss-CZa70j6i.js";import"./accessibleHandler-CjDcv_he.js";import"./Compass-S4M9NML1.js";import"./utils-DsJqvptN.js";import"./GoTo-Bv8U0vYJ.js";import"./NavigationToggle-Da_EVApx.js";import"./Zoom-OTCbJYcz.js";import"./viewpointUtils-CNGyoIgw.js";import"./frustum-Tc8kkw3_.js";import"./earthUtils-GWU8KixL.js";import"./spatialReferenceSupport-Bk67zMEK.js";import"./ElevationSamplerData-CFwzCheb.js";import"./terrainUtils-BQLPw4Jq.js";import"./TileInfo-DuivnO5H.js";import"./TileKey-DZd6gJy7.js";import"./Environment-Bpau6Ty8.js";import"./weather-CSMUgeU9.js";import"./quantityUtils-DSpmykXR.js";import"./vec2-C-4tM9Uv.js";import"./interfaces-B8ge7Jg9.js";import"./Texture-0jciB86n.js";import"./Matrix4PassUniform-CTNrzJ6Q.js";import"./BindType-BmZEZMMh.js";import"./VertexAttribute-BnAa5VW0.js";import"./Util-HYkJg9Vp.js";import"./enums-BlUEVwJR.js";import"./Texture-BF0Xf23l.js";import"./basicInterfaces-wONHx_SN.js";import"./ShaderTechniqueConfiguration-D3UbJ2mX.js";import"./doublePrecisionUtils-B0owpBza.js";import"./Indices-BZu2O98k.js";import"./Material-BfvzXcva.js";import"./triangle-CGr49R4x.js";import"./renderState-yUi34s5A.js";import"./requestImageUtils-Cd7mPI4y.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./RenderGeometry-CQQOC_nW.js";import"./vec3f32-Cw9Q6TO_.js";import"./DoubleArray-tnpOy9RK.js";import"./hydratedFeatures-DcIGyuBL.js";import"./axisAngleDegrees-jEN9n05M.js";import"./Scheduler-Bg_fxWwI.js";import"./debugFlags-Cr0sx6r_.js";import"./Float4DrawUniform-X0Lc1Ix0.js";import"./NestedMap-DgiGbX8E.js";import"./Octree-lrGXb_0y.js";import"./InterleavedLayout-ZKuAjCiK.js";import"./BufferView-XrMc2vJu.js";import"./types-D0PSWh4d.js";import"./floatRGBA-DZ6CgOhi.js";import"./Intersector-CG5xfiNM.js";import"./glUtil-C6KhMg1m.js";import"./VertexArrayObject-9V6uZ6_q.js";import"./BufferObject-CWTeBz1x.js";import"./Program-BnQQlkGO.js";import"./_commonjsHelpers-DCkdB7M8.js";import"./ShadowCastVisualizeTechniqueConfiguration-Dah3u-G-.js";import"./euclideanLengthMeasurementUtils-CuSkQONc.js";import"./ray-BtGY6UNr.js";import"./ZoomMomentumEstimator-pQkiU-PR.js";import"./ColorMaterial.glsl-CcrBVOmk.js";import"./VertexColor.glsl-BX9otDj2.js";import"./labelFormatUtils-DjuAeSua.js";import"./FeatureTileDescriptor3D-CvT50Jkf.js";import"./elevationInfoUtils-JmMUMmCn.js";import"./ElevationQueryTileCache-ByGSevWc.js";import"./LayerConstants-B33OP6sh.js";import"./Intersector-ENyKy7_L.js";import"./ElevationRange-BrgM1moX.js";import"./geometryServiceUtils-zF1xOQ4Y.js";import"./project-BQyPiext.js";import"./utils-nzDIu46v.js";import"./utils-D67OULxu.js";import"./hitTestSelectUtils-UXJPjatw.js";import"./ByteSizeUnit-BsxeN7wM.js";import"./DefaultMaterial_COLOR_GAMMA-vDn2TTUE.js";import"./resourceUtils-Cv8EFCAN.js";import"./objectResourceUtils-dMevf21j.js";import"./devEnvironmentUtils-D6qIi8Ky.js";import"./vec3-DxxvdsHs.js";import"./vec4-B2fX0VJI.js";import"./vec2f32-BbH2jxlN.js";import"./DecodeSymbolColor.glsl-CpAWHGzb.js";import"./RenderableTile-CE6botJN.js";import"./enums-BRzLM11V.js";import"./TileStrategy-CcsveE-I.js";import"./TileKey-m4M152GY.js";import"./QueueProcessor-01Ee2ByR.js";import"./config-MDUrh2eL.js";import"./DefaultVertexAttributeLayouts-_lUGuBk_.js";import"./DisplayObject-I7xo9JVP.js";import"./StyleDefinition-BK3ROBTO.js";import"./enums-BRXbslMp.js";import"./GeometryUtils-CGNDP0vy.js";import"./Normals-ClOhen2_.js";import"./resources-Bv-4dVJF.js";import"./edgeUtils-CckHLSHv.js";import"./edgeProcessing-BO3TMEUB.js";import"./deduplicate-CREmZpKM.js";import"./testSVGPremultipliedAlpha-eKesxQ43.js";import"./RenderingContext-DNkBZ-bu.js";import"./ProgramCache-DLTjjJNh.js";import"./imageUtils-BsB3EL45.js";import"./dehydratedFeatures-DvwHN5Vy.js";import"./featureConversionUtils-C8uvc1AG.js";import"./OptimizedFeature-7juV2tZm.js";import"./OptimizedGeometry-vU5jWBvU.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./earcut-BqgeR2O3.js";import"./SnappingCandidate-O5eRSE6e.js";import"./triangulationUtils-BSy4A0L9.js";import"./CIMSymbolHelper-DvNaY2BT.js";import"./BidiEngine-BwB1Df7c.js";import"./fontUtils-BN21lj56.js";import"./definitions-ByNBSgP9.js";import"./mat2d-CXMJJ9G6.js";import"./mat2df32-orApM5a3.js";import"./Rect-CUzevAry.js";import"./BoundingBox-BhuXqU4L.js";import"./cimSymbolUtils-DzDRYI6s.js";import"./utils-BbU12Hvz.js";import"./lineStippleUtils-Cu2kwDBg.js";import"./MeshComponent-CcZOTV9N.js";import"./MeshVertexAttributes-DiX-RN8y.js";import"./meshVertexSpaceUtils-UWZ_3JBG.js";import"./MeshLocalVertexSpace-Ck1lhGhd.js";import"./projection-BJFZt5ZW.js";import"./DefaultLayouts-LbPHMYzg.js";import"./webStyleSymbolUtils-CT_ZIx-N.js";import"./popupUtils-DV44wDbq.js";var r;(function(e){e[e.API=1]="API",e[e.VerboseAPI=2]="VerboseAPI",e[e.Error=3]="Error"})(r||(r={}));const p=f(),S=f();let n=class extends R(F(U)){constructor(){super(...arguments),this._suspendedHandle=null,this._usedMemory=0,this._futureMemory=0,this.type="voxel-3d",this.slicePlaneEnabled=!1,this._wasmLayerId=-1,this.ignoresMemoryFactor=!0,this._dbgFlags=new Set}get baseUrl(){var e;return((e=this.layer.parsedUrl)==null?void 0:e.path)??""}get wasmLayerId(){return this._wasmLayerId}initialize(){var d;if(this._dbgFlags.add(r.Error),this.view.viewingMode!=="local")throw new u("voxel:unsupported-viewingMode","Voxel layers support local viewingMode only.",{});if(!((d=this.view._stage.renderView.renderingContext.capabilities.colorBufferFloat)!=null&&d.textureFloat))throw new u("voxel:missing-color-buffer-float","Voxel layers require the WebGL2 extension EXT_color_buffer_float",{});const e=this.layer.spatialReference;if(!W(e,this.view.spatialReference))throw new u("layerview:spatial-reference-incompatible","The spatial reference of this scene layer is incompatible with the spatial reference of the view",{});const t=this.layer.currentVariableId,o=this.layer.getVolume(t),a=this.layer.getVariable(t);if(o!=null&&a!=null){const h=o.dimensions[0],i=o.dimensions[1],c=o.zDimension;if(c>1){const g=o.dimensions[c],v=h.size*i.size*g.size;let _=1;switch(a.renderingFormat.type){case"Int16":case"UInt16":_=2;break;case"Int32":case"UInt32":case"Float32":_=4}this._futureMemory=_*v}}const l=$(this).then(h=>{this._wasmLayerId=h,this._suspendedHandle=m(()=>this.suspended,i=>{const c=s(this.view);c&&c.setEnabled(this,!i)},T),this.addHandles([m(()=>this.layer.renderMode,i=>this._pushRenderModeToWasm(i)),m(()=>this.layer.currentVariableId,i=>this._pushCurrentVariableIdToWasm(i)),m(()=>this.layer.getSections(),i=>this._pushSectionsToWasm(i)),m(()=>this.layer.getVariableStyles(),i=>this._pushVariableStylesToWasm(i)),m(()=>this.layer.getVolumeStyles(),i=>this._pushVolumeStylesToWasm(i)),m(()=>this.layer.enableDynamicSections,i=>this._pushEnableDynamicSectionsToWasm(i)),m(()=>this.layer.enableIsosurfaces,i=>this._pushEnableIsosurfacesToWasm(i)),m(()=>this.layer.enableSections,i=>this._pushEnableSectionsToWasm(i)),m(()=>this.layer.enableSlices,i=>this._pushEnableSlicesToWasm(i)),m(()=>[this.layer.timeOffset,this.layer.timeExtent,this.layer.useViewTime],()=>this._updateLayerTimeProperties()),m(()=>this.slicePlaneEnabled,i=>this._pushAnalysisSliceToWasm(i,this.view.slicePlane)),m(()=>this.view.slicePlane,i=>this._pushAnalysisSliceToWasm(this.slicePlaneEnabled,i))])}).catch(h=>{if(w(this),this._wasmLayerId=-1,h===-1)throw new u("voxel:addLayer-failure","The voxel layer description was invalid.",{});if(h===-2)throw new u("voxel:addLayer-failure","The voxel layer web assembly module failed to download.",{})});this.addResolvingPromise(l)}destroy(){w(this),this._suspendedHandle&&(this._suspendedHandle.remove(),this._suspendedHandle=null)}isUpdating(){const e=s(this.view);return!(this._wasmLayerId<0||e==null)&&e.isUpdating(this._wasmLayerId)}updatingFlagChanged(){this.notifyChange("updating")}get usedMemory(){return this._usedMemory}get unloadedMemory(){return this._futureMemory}get performanceInfo(){return new C(this.usedMemory)}get visibleAtCurrentScale(){return z(this.layer.effectiveScaleRange,this.view.terrainScale)}whenGraphicBounds(e,t){const o=e.attributes["Voxel.WorldPosition"];if(o){const a=A(),l=JSON.parse(o);if(P(l,this.view.renderSpatialReference,S,this.view.spatialReference||E.WGS84))return x(a,S),Promise.resolve({boundingBox:a,screenSpaceObjects:[]})}return Promise.reject()}setUsedMemory(e){this._usedMemory=e,this._futureMemory=0}captureFrustum(){const e=s(this.view);e==null||e.captureFrustum()}toggleFullVolumeExtentDraw(){const e=s(this.view);e==null||e.toggleFullVolumeExtentDraw(this)}getLayerTimes(){const e=s(this.view);return(e==null?void 0:e.getLayerTimes(this))??[]}getCurrentLayerTimeIndex(){const e=s(this.view);return(e==null?void 0:e.getCurrentLayerTimeIndex(this))??0}_pushRenderModeToWasm(e){const t=s(this.view);this._dbg(r.VerboseAPI,"VoxelLayerView3D._pushRenderModeToWasm() called, "+(t?"have WASM":"don't have WASM!!!")),t!=null&&t.setRenderMode(this,e)||this._dbg(r.Error,"VoxelLayerView3D._pushRenderModeToWasm() failed!")}_pushSectionsToWasm(e){const t=s(this.view);this._dbg(r.VerboseAPI,"VoxelLayerView3D._pushSectionsToWasm() called, "+(t?"have WASM":"don't have WASM!!!")),t!=null&&t.setStaticSections(this,e)||this._dbg(r.Error,"VoxelLayerView3D._pushSectionsToWasm() failed!")}_pushCurrentVariableIdToWasm(e){const t=s(this.view);this._dbg(r.VerboseAPI,"VoxelLayerView3D._pushCurrentVariableIdToWasm() called!, "+(t?"have WASM":"don't have WASM!!!")),t!=null&&t.setCurrentVariable(this,e)||this._dbg(r.Error,"VoxelLayerView3D._pushCurrentVariableIdToWasm() failed!")}_pushVariableStylesToWasm(e){const t=s(this.view);this._dbg(r.VerboseAPI,"VoxelLayerView3D._pushVariableStylesToWasm() called, "+(t?"have WASM":"don't have WASM!!!")),t!=null&&t.setVariableStyles(this,e)||this._dbg(r.Error,"VoxelLayerView3D._pushVariableStylesToWasm() failed!")}_accountForEnableSlices(e,t){const o=t??this.layer.enableSlices;for(let a=0;a<e.length;++a){const l=e[a];for(const d of l.slices)d.enabled=d.enabled&&o}}_pushVolumeStylesToWasm(e){const t=s(this.view);this._dbg(r.VerboseAPI,"VoxelLayerView3D._pushVolumeStylesToWasm() called, "+(t?"have WASM":"don't have WASM!!!")),t&&(this._accountForEnableSlices(e,null),t.setVolumeStyles(this,e)||this._dbg(r.Error,"VoxelLayerView3D._pushVolumeStylesToWasm() failed!"))}_pushAnalysisSliceToWasm(e,t){const o=s(this.view);this._dbg(r.VerboseAPI,"VoxelLayerView3D._pushAnalysisSliceToWasm() called, "+(o?"have WASM":"don't have WASM!!!"));let a=!1;if(o){if(t){const l=t.origin;L(p,t.basis1,t.basis2),M(p,p),a=o.setAnalysisSlice(this,e,l,p)}else I(p,0,0,1),a=o.setAnalysisSlice(this,!1,p,p);a||this._dbg(r.Error,"VoxelLayerView3D._pushAnalysisSliceToWasm() failed!")}}_updateLayerTimeProperties(){const e=s(this.view);this._dbg(r.VerboseAPI,"VoxelLayerView3D._updateLayerTimeProperties() called, "+(e?"have WASM":"don't have WASM!!!")),e&&e.updateLayerTimeProperties(this)}_pushEnableDynamicSectionsToWasm(e){const t=s(this.view);this._dbg(r.VerboseAPI,"VoxelLayerView3D._pushEnableDynamicSectionsToWasm() called, "+(t?"have WASM":"don't have WASM!!!")),t!=null&&t.setEnableDynamicSections(this,e)||this._dbg(r.Error,"VoxelLayerView3D._pushEnableDynamicSectionsToWasm() failed!")}_pushEnableSlicesToWasm(e){const t=s(this.view);if(this._dbg(r.VerboseAPI,"VoxelLayerView3D._pushEnableSlicesToWasm() called, "+(t?"have WASM":"don't have WASM!!!")),t){const o=this.layer.getVolumeStyles();this._accountForEnableSlices(o,e),t.setVolumeStyles(this,o)||this._dbg(r.Error,"VoxelLayerView3D._pushEnableSlicesToWasm() failed!")}}_pushEnableIsosurfacesToWasm(e){const t=s(this.view);this._dbg(r.VerboseAPI,"VoxelLayerView3D._pushEnableIsosurfacesToWasm() called, "+(t?"have WASM":"don't have WASM!!!")),t!=null&&t.setEnableIsosurfaces(this,e)||this._dbg(r.Error,"VoxelLayerView3D._pushEnableIsosurfacesToWasm() failed!")}_pushEnableSectionsToWasm(e){const t=s(this.view);this._dbg(r.VerboseAPI,"VoxelLayerView3D._pushEnableSectionsToWasm() called, "+(t?"have WASM":"don't have WASM!!!")),t!=null&&t.setEnableSections(this,e)||this._dbg(r.Error,"VoxelLayerView3D._pushEnableSectionsToWasm() failed!")}async whenGraphicAttributes(e,t){return e}_dbg(e,t){this._dbgFlags.has(e)&&(e===r.Error?V.getLogger(this).error(t):V.getLogger(this).warn(t))}};y([b()],n.prototype,"layer",void 0),y([b()],n.prototype,"baseUrl",null),y([b({type:Boolean})],n.prototype,"slicePlaneEnabled",void 0),y([b({readOnly:!0})],n.prototype,"visibleAtCurrentScale",null),n=y([D("esri.views.3d.layers.VoxelLayerView3D")],n);const cr=n;export{cr as default};

import{b6 as I,ht as R,M as f,d as g,dJ as $,ao as E,aI as S}from"./index-DX0rcHuW.js";import{$ as V}from"./Mesh-C4vN4bid.js";import{l as k}from"./MeshVertexAttributes-DiX-RN8y.js";import{N as B,u as F,M as H,E as j,L as q,a as L}from"./OrientedImageryViewer-ueGmbrCP.js";import"./axisAngleDegrees-jEN9n05M.js";import"./quat-DrJsq_-D.js";import"./mat3f64-BBpwCtoL.js";import"./quatf64-BrpT0VRp.js";import"./MeshComponent-CcZOTV9N.js";import"./imageUtils-BsB3EL45.js";import"./MeshLocalVertexSpace-Ck1lhGhd.js";import"./MeshTransform-DiRYmUD4.js";import"./mat4f64-Dk4dwAN8.js";import"./meshVertexSpaceUtils-UWZ_3JBG.js";import"./triangulationUtils-BSy4A0L9.js";import"./earcut-BqgeR2O3.js";import"./_commonjsHelpers-DCkdB7M8.js";import"./DoubleArray-tnpOy9RK.js";import"./Indices-BZu2O98k.js";import"./plane-BL9J6YX0.js";import"./vec2f64-Diu2Kaa8.js";import"./mathUtils-BsqbT0oM.js";import"./deduplicate-CREmZpKM.js";import"./projection-BJFZt5ZW.js";import"./mat3-Ck4GO2qT.js";import"./spatialReferenceEllipsoidUtils-Bv0mQCFg.js";import"./computeTranslationToOriginAndRotation-B9BchKSd.js";import"./BufferView-XrMc2vJu.js";import"./vec2-C-4tM9Uv.js";import"./vec3-DxxvdsHs.js";import"./vec4-B2fX0VJI.js";import"./projectPointToVector-6lqiVL77.js";import"./vertexSpaceConversion-BW-Bnw8A.js";import"./External-EuBme4r6.js";import"./infoFor3D-CxOdoily.js";import"./a11yUtils-BcOnuh2m.js";import"./ImageryTileLayer-jEm_fz2z.js";import"./ArcGISService-CVVnFG2B.js";import"./arcgisLayerUrl-BpJodxxk.js";import"./fetchRasterInfo-BdsRMIZn.js";import"./multidimensionalUtils-MixfqFSq.js";import"./dataUtils-DaNHGSI8.js";import"./pixelRangeUtils-DR2RxTkt.js";import"./RasterSymbolizer-B8L8d0Hx.js";import"./normalizeUtils-CzEkgn6d.js";import"./normalizeUtilsCommon-DXRtgGFh.js";import"./utils-nzDIu46v.js";import"./utils-D67OULxu.js";import"./utils-BbU12Hvz.js";import"./cimSymbolUtils-DzDRYI6s.js";import"./ClassBreaksDefinition-RQBfkmon.js";import"./TileInfo-DuivnO5H.js";import"./TileKey-DZd6gJy7.js";import"./RawBlockCache-CQZ6hyoX.js";import"./rasterProjectionHelper-ByWCXlzR.js";import"./QueueProcessor-01Ee2ByR.js";import"./ReactiveMap-r-vujrh9.js";import"./signal-CpmfLcHB.js";import"./PolynomialTransform-DxKDRztK.js";import"./TilemapCache-DM2bbb8F.js";import"./ByteSizeUnit-BsxeN7wM.js";import"./interfaces-CL2NbQte.js";import"./jsxFactory-DmHi7Kb2.js";import"./uuid-fwrPAdZb.js";import"./GraphicsLayer-SBXo_p0G.js";import"./GraphicsCollection-BjA_qBYu.js";import"./OrientedImageryLayer-CYVc2_bi.js";import"./FeatureLayer-Bb5mf85J.js";import"./FeatureLayerBase-uK0oK06Z.js";import"./inputs-Due4QVtL.js";import"./formUtils-Dni92j4V.js";import"./HeightModelInfo-DaJXTLDg.js";import"./LayerFloorInfo-D-bXPB8b.js";import"./Relationship-Clp_49iY.js";import"./serviceCapabilitiesUtils-CIgEASrL.js";import"./editsZScale-BDLbHb5e.js";import"./queryZScale-B1r3mH-Y.js";import"./APIKeyMixin-DSbft86T.js";import"./EditBusLayer-Brt5ASt_.js";import"./FeatureType-Bb4KOLCq.js";import"./versionUtils-DlHqsQBg.js";import"./styleUtils-CxRaW7Jr.js";import"./TopFeaturesQuery-B-wHLSqs.js";import"./requestPresets-BzU17vvK.js";import"./Circle-BBOrwxzN.js";import"./geodesicUtils-BPlO99Nt.js";import"./lineSegment-C2OVzbAD.js";import"./sphere-COyqsaGw.js";import"./ElevationLayer-BkTQMv-R.js";import"./ArcGISCachedService-BloaOzYL.js";import"./TileInfoTilemapCache-BB5YNiTu.js";import"./LercDecoder-Da132gow.js";import"./WorkerHandle-DkXs_4ea.js";import"./ImageryLayer-FuYL2yDi.js";import"./imageBitmapUtils-Cem1rTGf.js";import"./executeQueryJSON-_Gsxb9pi.js";import"./query-95tcIPsI.js";import"./pbfQueryUtils-B33F7Io8.js";import"./pbf-9I_px9lQ.js";import"./OptimizedGeometry-vU5jWBvU.js";import"./OptimizedFeature-7juV2tZm.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./AttachmentInfo-CypukXoR.js";import"./executeForIds-BJu0fyay.js";import"./ElevationSamplerData-CFwzCheb.js";import"./ElevationTile-MIg3DBTc.js";import"./InputManager-abOXR3ru.js";import"./Viewpoint-sw4jiA6m.js";import"./Cyclical-CEj-eenM.js";import"./Viewshed.glsl-BfaJltDE.js";import"./WaterSurface.glsl-CB7boCuS.js";import"./RenderGeometry-CQQOC_nW.js";import"./vec3f32-Cw9Q6TO_.js";import"./Texture-0jciB86n.js";import"./Matrix4PassUniform-CTNrzJ6Q.js";import"./interfaces-B8ge7Jg9.js";import"./BindType-BmZEZMMh.js";import"./VertexAttribute-BnAa5VW0.js";import"./Util-HYkJg9Vp.js";import"./enums-BlUEVwJR.js";import"./Texture-BF0Xf23l.js";import"./basicInterfaces-wONHx_SN.js";import"./ShaderTechniqueConfiguration-D3UbJ2mX.js";import"./doublePrecisionUtils-B0owpBza.js";import"./Material-BfvzXcva.js";import"./ViewingMode-Dodu7ZZk.js";import"./triangle-CGr49R4x.js";import"./renderState-yUi34s5A.js";import"./requestImageUtils-Cd7mPI4y.js";import"./orientedBoundingBox-BTwqkknQ.js";import"./ElevationProvider-Xg9LKEp7.js";import"./boundedPlane-MAPkm7Yi.js";import"./verticalOffsetUtils-Bq_pVrum.js";import"./hydratedFeatures-DcIGyuBL.js";import"./projectVectorToVector-DjKO2tJh.js";import"./frustum-Tc8kkw3_.js";import"./weather-CSMUgeU9.js";import"./Scheduler-Bg_fxWwI.js";import"./debugFlags-Cr0sx6r_.js";import"./Float4DrawUniform-X0Lc1Ix0.js";import"./NestedMap-DgiGbX8E.js";import"./Octree-lrGXb_0y.js";import"./InterleavedLayout-ZKuAjCiK.js";import"./types-D0PSWh4d.js";import"./floatRGBA-DZ6CgOhi.js";import"./Intersector-CG5xfiNM.js";import"./glUtil-C6KhMg1m.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./VertexArrayObject-9V6uZ6_q.js";import"./BufferObject-CWTeBz1x.js";import"./ColorMaterial.glsl-CcrBVOmk.js";import"./VertexColor.glsl-BX9otDj2.js";import"./vec2f32-BbH2jxlN.js";import"./dehydratedFeatures-DvwHN5Vy.js";import"./featureConversionUtils-C8uvc1AG.js";import"./edgeUtils-CckHLSHv.js";import"./DecodeSymbolColor.glsl-CpAWHGzb.js";import"./SnappingCandidate-O5eRSE6e.js";import"./Normals-ClOhen2_.js";import"./objectResourceUtils-dMevf21j.js";import"./devEnvironmentUtils-D6qIi8Ky.js";import"./DefaultMaterial_COLOR_GAMMA-vDn2TTUE.js";import"./resourceUtils-Cv8EFCAN.js";import"./CIMSymbolHelper-DvNaY2BT.js";import"./BidiEngine-BwB1Df7c.js";import"./fontUtils-BN21lj56.js";import"./GeometryUtils-CGNDP0vy.js";import"./enums-BRXbslMp.js";import"./definitions-ByNBSgP9.js";import"./mat2d-CXMJJ9G6.js";import"./mat2df32-orApM5a3.js";import"./Rect-CUzevAry.js";import"./BoundingBox-BhuXqU4L.js";import"./lineStippleUtils-Cu2kwDBg.js";import"./projectVectorToPoint-jxEu1YJy.js";import"./DefaultLayouts-LbPHMYzg.js";import"./webStyleSymbolUtils-CT_ZIx-N.js";import"./Intersector-ENyKy7_L.js";import"./RenderCoordsHelper-D33jtR9v.js";import"./scaleUtils-ClqQrarK.js";import"./DefaultUI-BM5o-ZLH.js";import"./UpdatingHandles-CERUeL1P.js";import"./Map-BcseqEdU.js";import"./Basemap-CjElSnyL.js";import"./loadAll-8MiqgLTH.js";import"./writeUtils-RiCb1SCd.js";import"./Ground-dhRLerDt.js";import"./CollectionFlattener-Be8YW6oV.js";import"./editableLayers-DuIVmwOk.js";import"./catalogUtils-B2PovfNH.js";import"./basemapUtils-rjdIOXhY.js";import"./TablesMixin-CcZZ6esO.js";import"./selectionUtils-DYi6daQO.js";import"./IViewEvents-Bci6PjlS.js";import"./interfaces-D6pIddIh.js";import"./screenUtils-BcEL8jIe.js";import"./heightModelInfoUtils-CTi_JiJC.js";import"./capabilities-C84AMSCg.js";import"./themeUtils-C3zvZbsE.js";import"./globalCss-CZa70j6i.js";import"./accessibleHandler-CjDcv_he.js";import"./Compass-S4M9NML1.js";import"./utils-DsJqvptN.js";import"./GoTo-Bv8U0vYJ.js";import"./NavigationToggle-Da_EVApx.js";import"./Zoom-OTCbJYcz.js";import"./viewpointUtils-CNGyoIgw.js";import"./earthUtils-GWU8KixL.js";import"./spatialReferenceSupport-Bk67zMEK.js";import"./terrainUtils-BQLPw4Jq.js";import"./Environment-Bpau6Ty8.js";import"./quantityUtils-DSpmykXR.js";import"./Program-BnQQlkGO.js";import"./ShadowCastVisualizeTechniqueConfiguration-Dah3u-G-.js";import"./euclideanLengthMeasurementUtils-CuSkQONc.js";import"./ray-BtGY6UNr.js";import"./ZoomMomentumEstimator-pQkiU-PR.js";import"./labelFormatUtils-DjuAeSua.js";import"./FeatureTileDescriptor3D-CvT50Jkf.js";import"./elevationInfoUtils-JmMUMmCn.js";import"./ElevationQueryTileCache-ByGSevWc.js";import"./LayerConstants-B33OP6sh.js";import"./ElevationRange-BrgM1moX.js";import"./geometryServiceUtils-zF1xOQ4Y.js";import"./project-BQyPiext.js";import"./hitTestSelectUtils-UXJPjatw.js";import"./RenderableTile-CE6botJN.js";import"./enums-BRzLM11V.js";import"./TileStrategy-CcsveE-I.js";import"./TileKey-m4M152GY.js";import"./config-MDUrh2eL.js";import"./DefaultVertexAttributeLayouts-_lUGuBk_.js";import"./DisplayObject-I7xo9JVP.js";import"./StyleDefinition-BK3ROBTO.js";import"./resources-Bv-4dVJF.js";import"./edgeProcessing-BO3TMEUB.js";import"./testSVGPremultipliedAlpha-eKesxQ43.js";import"./RenderingContext-DNkBZ-bu.js";import"./ProgramCache-DLTjjJNh.js";import"./layerViewUtils-D2JqIDZ8.js";import"./vmEvent-D4Ubqkbq.js";import"./MapView-D7swOHse.js";import"./viewpointUtils-BG1_rfM2.js";import"./mat2df64-CBKYtunK.js";import"./unitBezier-BX6NeAEr.js";import"./Tile-B_ZCIyG8.js";import"./quickselect-D0_cvEX6.js";import"./utils-CXgSw6Sd.js";import"./ColorBackground-UV5G2K2b.js";import"./geometryEngine-C92iiwvG.js";import"./geometryEngineBase-RmbNeFm7.js";import"./hydrated-CEL7VY_R.js";import"./substitute-e0S7rtIE.js";class Pm{constructor(c){this.viewModel=c,this.createFootprints=async p=>{const{coverageFrustums:r,currentBestFeature:i,isAdditionalCoverageVisible:a,view:o}=this.viewModel,m=r.filter(I);for(const e of m){let t=e.clone();if(!o.spatialReference.equals(t.spatialReference)){const{components:s,spatialReference:l,origin:n,vertexAttributes:h,vertexSpace:v}=t;if(v.type==="local"){const u=await R(n,o.spatialReference,p);f(p),t.centerAt(u)}else{const u=h.position,y=Float64Array.from(await B([...u],l.clone(),o.spatialReference.clone(),p));f(p),t=new V({vertexAttributes:new k({position:y}),components:s,spatialReference:o.spatialReference.clone()})}}e.imageID===i.attributes.objectId?this.viewModel.bestFeatureFootprint=new g({attributes:{imageID:e.imageID},geometry:t,symbol:F.clone(),visible:!1}):this.viewModel.additionalFootprints.push(new g({attributes:{imageID:e.imageID},geometry:t,symbol:H.clone(),visible:a}))}},this.updateFootprint=async(p,r)=>{const{currentBestFeature:i,imagePointsInView:a,activeViewer:o,footprintExtent:m,view:e}=this.viewModel,t=$(V,this.viewModel.getCurrentBestFeaturePolygon().geometry),s=o==null?void 0:o.imageSize;if(!(i&&t&&a&&s&&m))return;const{cameraHeight:l,location:n,cameraPitch:h,horizontalFieldOfView:v,verticalFieldOfView:u,cameraRoll:y,imageRotation:A}=i.attributes,P=n.toArray(),{vertexAttributes:{position:x},spatialReference:z}=t,O=await G(x,z,n.spatialReference),C=await j(p,{feature:i,imageProperties:{width:s[0],height:s[1]},options:r,footprintExtent:m});f(r);let w=C.filter(I);if(!w.length)return;w[0].spatialReference.equals(n.spatialReference)||(w=await Promise.all(w.map(async d=>{const b=await R(d,n.spatialReference,r);return f(r),b})));const D=await q(a.slice(0,4).map(({x:d,y:b})=>[d,b]),w.slice(0,4).map(d=>d.toArray()),{cameraHeight:l,cameraLocation:P,cameraPitch:h,frustumVertices:O,horizontalFieldOfView:v,imageHeight:s[1],imageWidth:s[0],inSRS:{wkid:n.spatialReference.wkid},outSRS:{wkid:e.spatialReference.wkid},verticalFieldOfView:u,cameraRoll:y??0,imageRotation:A??0,options:r});this.viewModel.updateCurrentCoveragePolygon(new g({attributes:{imageID:i.attributes.objectId},geometry:D,symbol:F.clone(),visible:this.viewModel.currentCoverageVisible}))},this.updateFootprintPanorama=async(p,r)=>{var l;await E(r);const{horizontalFieldOfView:i,pitch:a,verticalFieldOfView:o,yaw:m}=p,e=(l=this.viewModel.currentBestFeature)==null?void 0:l.clone();if(!e)return;const{attributes:t}=e;t.orientedImageryType=null,t.cameraHeading=(m+t.cameraHeading)%360,t.cameraPitch=a,t.horizontalFieldOfView=i,t.verticalFieldOfView=o,t.cameraRoll=0;const{frustum:s}=L(t);s&&this.viewModel.updateCurrentCoveragePolygon(new g({attributes:{imageID:t.objectId},geometry:s,symbol:F.clone(),visible:this.viewModel.currentCoverageVisible}))}}updateGroundElevation(c,p){const{geometry:r}=this.viewModel.currentBestFeature,i=p.queryElevation(r);c.forEach(a=>{const{geometry:o}=a;switch(o==null?void 0:o.type){case"mesh":{const{vertexAttributes:{position:m}}=o,e=Math.floor(m.length/3);for(let t=0;t<e;t+=1)m[3*t+2]+=(i==null?void 0:i.z)??0;break}case"point":o.z=(o.z??0)+((i==null?void 0:i.z)??0)}})}}async function G(M,c,p,r){return Float64Array.from((await Promise.all(M.reduce((i,a,o)=>{const m=Math.floor(o/3);return i[m]=i[m]??[],i[m].push(a),i},new Array).map(async i=>(await R(new S(i,c),p,r)).toArray()))).flat())}export{Pm as default};

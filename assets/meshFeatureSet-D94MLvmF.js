import{f9 as d,f as h,d as y,aL as S,aI as N,eI as l,n as D}from"./index-DX0rcHuW.js";import{$ as g}from"./Mesh-C4vN4bid.js";import{N as M}from"./MeshTransform-DiRYmUD4.js";import{o as w,i as I}from"./External-EuBme4r6.js";import{s as F}from"./infoFor3D-CxOdoily.js";import"./axisAngleDegrees-jEN9n05M.js";import"./quat-DrJsq_-D.js";import"./mat3f64-BBpwCtoL.js";import"./quatf64-BrpT0VRp.js";import"./MeshComponent-CcZOTV9N.js";import"./imageUtils-BsB3EL45.js";import"./MeshVertexAttributes-DiX-RN8y.js";import"./MeshLocalVertexSpace-Ck1lhGhd.js";import"./meshVertexSpaceUtils-UWZ_3JBG.js";import"./triangulationUtils-BSy4A0L9.js";import"./earcut-BqgeR2O3.js";import"./_commonjsHelpers-DCkdB7M8.js";import"./DoubleArray-tnpOy9RK.js";import"./Indices-BZu2O98k.js";import"./plane-BL9J6YX0.js";import"./mat4f64-Dk4dwAN8.js";import"./vec2f64-Diu2Kaa8.js";import"./mathUtils-BsqbT0oM.js";import"./deduplicate-CREmZpKM.js";import"./projection-BJFZt5ZW.js";import"./mat3-Ck4GO2qT.js";import"./spatialReferenceEllipsoidUtils-Bv0mQCFg.js";import"./computeTranslationToOriginAndRotation-B9BchKSd.js";import"./BufferView-XrMc2vJu.js";import"./vec2-C-4tM9Uv.js";import"./vec3-DxxvdsHs.js";import"./vec4-B2fX0VJI.js";import"./projectPointToVector-6lqiVL77.js";import"./vertexSpaceConversion-BW-Bnw8A.js";const T=()=>D.getLogger("esri.rest.support.meshFeatureSet");function gt(t,r,e){const o=e.features;e.features=[],delete e.geometryType;const n=d.fromJSON(e);if(n.geometryType="mesh",!e.assetMaps)return n;const s=A(r,e.assetMaps),i=t.sourceSpatialReference??h.WGS84,u=e.globalIdFieldName,{outFields:a}=t,c=a!=null&&a.length>0?L(a.includes("*")?null:new Set(a)):()=>({});for(const p of o){const m=O(p,u,i,r,s);n.features.push(new y({geometry:m,attributes:c(p)}))}return n}function L(t){return({attributes:r})=>{if(!r)return{};if(!t)return r;for(const e in r)t.has(e)||delete r[e];return r}}function O(t,r,e,o,n){const s=t.attributes[r],i=n.get(s);if(i==null||!t.geometry)return null;const u=$(t,e,o),a=S.fromJSON(t.geometry);a.spatialReference=e;const c=x(t.attributes,o),p=e.isGeographic?"local":"georeferenced",m=P(i);return m?g.createWithExternalSource(u,m,{extent:a,transform:c,vertexSpace:p}):g.createIncomplete(u,{extent:a,transform:c,vertexSpace:p})}function $({attributes:t},r,{transformFieldRoles:e}){const o=t[e.originX],n=t[e.originY],s=t[e.originZ];return new N({x:o,y:n,z:s,spatialReference:r})}function x(t,{transformFieldRoles:r}){return new M({translation:[t[r.translationX],-t[r.translationZ],t[r.translationY]],rotationAxis:[t[r.rotationX],-t[r.rotationZ],t[r.rotationY]],rotationAngle:t[r.rotationDeg],scale:[t[r.scaleX],t[r.scaleZ],t[r.scaleY]]})}var f;function A(t,r){const e=new Map;for(const o of r){const n=o.parentGlobalId;if(n==null)continue;const s=o.assetName,i=o.assetType,u=o.assetHash,a=o.assetURL,c=o.conversionStatus,p=o.seqNo,m=F(i,t.supportedFormats);if(!m){T().error("mesh-feature-set:unknown-format",`Service returned an asset of type ${i}, but it does not list it as a supported type`);continue}const E=l(e,n,()=>({files:new Map}));l(E.files,s,()=>({name:s,type:i,mimeType:m,status:b(c),parts:[]})).parts[p]={hash:u,url:a}}return e}function P(t){const r=Array.from(t.files.values()),e=new Array;for(const o of r){if(o.status!==f.COMPLETED)return null;const n=new Array;for(const s of o.parts){if(!s)return null;n.push(new w(s.url,s.hash))}e.push(new I(o.name,o.mimeType,n))}return e}function b(t){switch(t){case"COMPLETED":case"SUBMITTED":return f.COMPLETED;case"INPROGRESS":return f.PENDING;default:return f.FAILED}}(function(t){t[t.FAILED=0]="FAILED",t[t.PENDING=1]="PENDING",t[t.COMPLETED=2]="COMPLETED"})(f||(f={}));export{A as assetMapFromAssetMapsJSON,O as extractMesh,gt as meshFeatureSetFromJSON};

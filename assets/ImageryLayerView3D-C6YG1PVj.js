import{eG as s,bZ as n,ac as d,ag as l}from"./index-DX0rcHuW.js";import{N as h}from"./DynamicLayerView3D-C5UNzmcy.js";import{m as g}from"./ImageryLayerView-2PuaWPU5.js";import"./RenderGeometry-CQQOC_nW.js";import"./vec2f64-Diu2Kaa8.js";import"./vec3f32-Cw9Q6TO_.js";import"./DoubleArray-tnpOy9RK.js";import"./Texture-0jciB86n.js";import"./Matrix4PassUniform-CTNrzJ6Q.js";import"./interfaces-B8ge7Jg9.js";import"./BindType-BmZEZMMh.js";import"./VertexAttribute-BnAa5VW0.js";import"./Util-HYkJg9Vp.js";import"./enums-BlUEVwJR.js";import"./Texture-BF0Xf23l.js";import"./basicInterfaces-wONHx_SN.js";import"./vec2-C-4tM9Uv.js";import"./mat3-Ck4GO2qT.js";import"./mat3f64-BBpwCtoL.js";import"./mat4f64-Dk4dwAN8.js";import"./ShaderTechniqueConfiguration-D3UbJ2mX.js";import"./doublePrecisionUtils-B0owpBza.js";import"./Indices-BZu2O98k.js";import"./Material-BfvzXcva.js";import"./ViewingMode-Dodu7ZZk.js";import"./triangle-CGr49R4x.js";import"./sphere-COyqsaGw.js";import"./plane-BL9J6YX0.js";import"./quatf64-BrpT0VRp.js";import"./mathUtils-BsqbT0oM.js";import"./lineSegment-C2OVzbAD.js";import"./renderState-yUi34s5A.js";import"./requestImageUtils-Cd7mPI4y.js";import"./orientedBoundingBox-BTwqkknQ.js";import"./quat-DrJsq_-D.js";import"./spatialReferenceEllipsoidUtils-Bv0mQCFg.js";import"./computeTranslationToOriginAndRotation-B9BchKSd.js";import"./ElevationProvider-Xg9LKEp7.js";import"./boundedPlane-MAPkm7Yi.js";import"./verticalOffsetUtils-Bq_pVrum.js";import"./hydratedFeatures-DcIGyuBL.js";import"./projectVectorToVector-DjKO2tJh.js";import"./projectPointToVector-6lqiVL77.js";import"./frustum-Tc8kkw3_.js";import"./axisAngleDegrees-jEN9n05M.js";import"./weather-CSMUgeU9.js";import"./Scheduler-Bg_fxWwI.js";import"./signal-CpmfLcHB.js";import"./debugFlags-Cr0sx6r_.js";import"./Float4DrawUniform-X0Lc1Ix0.js";import"./NestedMap-DgiGbX8E.js";import"./Octree-lrGXb_0y.js";import"./InterleavedLayout-ZKuAjCiK.js";import"./BufferView-XrMc2vJu.js";import"./types-D0PSWh4d.js";import"./floatRGBA-DZ6CgOhi.js";import"./Intersector-CG5xfiNM.js";import"./glUtil-C6KhMg1m.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./VertexArrayObject-9V6uZ6_q.js";import"./BufferObject-CWTeBz1x.js";import"./LayerView3D-CLOjZQPa.js";import"./heightModelInfoUtils-CTi_JiJC.js";import"./HeightModelInfo-DaJXTLDg.js";import"./arcgisLayerUrl-BpJodxxk.js";import"./projectExtentUtils-iwgeHhrT.js";import"./geometryServiceUtils-zF1xOQ4Y.js";import"./project-BQyPiext.js";import"./utils-nzDIu46v.js";import"./utils-D67OULxu.js";import"./ImageMaterial.glsl-B3buwcWq.js";import"./VertexColor.glsl-BX9otDj2.js";import"./DefaultLayouts-LbPHMYzg.js";import"./ColorMaterial.glsl-CcrBVOmk.js";import"./LayerView-C2s9lN61.js";import"./UpdatingHandles-CERUeL1P.js";import"./layerViewUtils-D2JqIDZ8.js";import"./RefreshableLayerView-C2j9J409.js";import"./timeSupport-BW78MsMT.js";import"./timeUtils-CovJpMS2.js";import"./utils-CXgSw6Sd.js";import"./tagSymbols-BPcGfZon.js";import"./popupUtils-DV44wDbq.js";let o=class extends g(h){constructor(){super(...arguments),this.type="imagery-3d",this.redrawDebounced=s(async t=>{this.redraw((i,r)=>this._redrawImage(i,r),t)},2e3)}initialize(){this.addHandles([n(()=>this.view.basemapTerrain.ready,()=>this._initializeMaximumDataResolution(),{once:!0,initial:!0}),this.layer.on("redraw",()=>this._updatingHandles.addPromise(this.redrawDebounced()))]),this._updatingHandles.add(()=>{var t,i;return(i=(t=this.layer)==null?void 0:t.exportImageServiceParameters)==null?void 0:i.version},()=>{this._updatingHandles.addPromise(this.refreshDebounced())}),this._updatingHandles.add(()=>{var t;return(t=this.layer)==null?void 0:t.renderer},()=>{this._updatingHandles.addPromise(this.refreshDebounced())}),this._updatingHandles.add(()=>this.timeExtent,()=>this._updatingHandles.addPromise(this.refreshDebounced()))}_initializeMaximumDataResolution(){this.maximumDataResolution=this.layer.loaded?this.layer.serviceRasterInfo.pixelSize:null}getFetchOptions(){return{timeExtent:this.timeExtent}}async processResult(t,i,r){i.imageOrCanvasElement?t.image=i.imageOrCanvasElement:(t.image=document.createElement("canvas"),t.pixelData=i.pixelData,await this._redrawImage(t,r))}async _redrawImage(t,i){if(!(t.image instanceof HTMLCanvasElement)||t.pixelData==null)throw new Error;const r=t.image,m=r.getContext("2d"),p=await this.layer.applyRenderer(t.pixelData,{signal:i}),e=this.layer.applyFilter(p).pixelBlock;if(e==null)throw new Error;r.width=e.width,r.height=e.height;const a=m.createImageData(e.width,e.height);a.data.set(e.getAsRGBA()),m.putImageData(a,0,0)}};o=d([l("esri.views.3d.layers.ImageryLayerView3D")],o);const Zt=o;export{Zt as default};

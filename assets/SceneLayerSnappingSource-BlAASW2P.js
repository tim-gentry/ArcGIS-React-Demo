import{ac as i,ad as n,ag as y,bh as m,bp as S,cx as f,eE as b,i0 as g,eK as k,M as C,b6 as H}from"./index-DX0rcHuW.js";import{h as L}from"./UpdatingHandles-CERUeL1P.js";import{a as E}from"./EdgeWorkerHandle-Krab2y4-.js";import{h as $}from"./WorkerHandle-DkXs_4ea.js";import{Z as O}from"./sphere-COyqsaGw.js";import{c as _,e as I,u as V}from"./SnappingManager-C8RCylzd.js";import{r as x}from"./VertexSnappingCandidate-HlPAcwSb.js";import"./workerHelper-DaWr0fN1.js";import"./InterleavedLayout-ZKuAjCiK.js";import"./BufferView-XrMc2vJu.js";import"./vec2-C-4tM9Uv.js";import"./types-D0PSWh4d.js";import"./Util-HYkJg9Vp.js";import"./vec2f64-Diu2Kaa8.js";import"./edgeProcessing-BO3TMEUB.js";import"./deduplicate-CREmZpKM.js";import"./Indices-BZu2O98k.js";import"./VertexAttribute-BnAa5VW0.js";import"./glUtil-C6KhMg1m.js";import"./enums-BlUEVwJR.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./Normals-ClOhen2_.js";import"./plane-BL9J6YX0.js";import"./mat3f64-BBpwCtoL.js";import"./mat4f64-Dk4dwAN8.js";import"./quatf64-BrpT0VRp.js";import"./mathUtils-BsqbT0oM.js";import"./elevationInfoUtils-JmMUMmCn.js";import"./projectVectorToVector-DjKO2tJh.js";import"./projectPointToVector-6lqiVL77.js";import"./geodesicUtils-BPlO99Nt.js";import"./geometry2dUtils-D5ud2BJg.js";import"./floorFilterUtils-DZ5C6FQv.js";import"./InputManager-abOXR3ru.js";import"./signal-CpmfLcHB.js";import"./keybindings-RFI4I3n4.js";import"./utils-CXgSw6Sd.js";import"./layerViewUtils-D2JqIDZ8.js";import"./geodesicLengthMeasurementUtils-1VjlYqtL.js";import"./quantityUtils-DSpmykXR.js";import"./geometryEngine-C92iiwvG.js";import"./geometryEngineBase-RmbNeFm7.js";import"./_commonjsHelpers-DCkdB7M8.js";import"./hydrated-CEL7VY_R.js";import"./Cyclical-CEj-eenM.js";import"./PointSnappingHint-5GPoViz2.js";let d=class extends m{constructor(e){super(e),this.availability=0,this._ids=new Set}destroy(){this._workerHandle.destroy(),this._workerHandle=null}initialize(){this._workerHandle=new R(this.schedule,{fetchAllEdgeLocations:(e,t)=>this._fetchAllEdgeLocations(e,t)})}async fetchCandidates(e,t){const r=e.coordinateHelper,{point:o}=e,s=P;this.renderCoordsHelper.toRenderCoords(o,r.spatialReference,s);const l=e.distance,c=typeof l=="number"?l:l.distance,h=await this._workerHandle.invoke({bounds:O(s[0],s[1],s[2],c),returnEdge:e.returnEdge,returnVertex:e.vertexMode!=="none"},t);return h.candidates.sort((u,v)=>u.distance-v.distance),h.candidates.map(u=>this._convertCandidate(r,u))}async add(e,t){this._ids.add(e.id),await this._workerHandle.invokeMethod("add",e,t)}async remove(e,t){this._ids.delete(e.id),await this._workerHandle.invokeMethod("remove",e,t)}_convertCandidate(e,t){switch(t.type){case"edge":return new I({objectId:t.objectId,targetPoint:_(this._convertRenderCoordinate(e,t.target)),edgeStart:this._convertRenderCoordinate(e,t.start),edgeEnd:this._convertRenderCoordinate(e,t.end),isDraped:!1});case"vertex":return new x({objectId:t.objectId,targetPoint:_(this._convertRenderCoordinate(e,t.target)),isDraped:!1})}}_convertRenderCoordinate({spatialReference:e},t){const r=S();return this.renderCoordsHelper.fromRenderCoords(t,r,e),V(r)}async _fetchAllEdgeLocations(e,t){const r=[],o=[];for(const{id:s,uid:l}of e.components)this._ids.has(s)&&r.push((async()=>{const c=await this.fetchEdgeLocations(s,t.signal),h=c.locations.buffer;return o.push(h),{id:s,uid:l,objectIds:c.objectIds,locations:h,origin:c.origin,type:c.type}})());return{result:{components:(await Promise.all(r)).filter(({id:s})=>this._ids.has(s))},transferList:o}}};i([n({constructOnly:!0})],d.prototype,"renderCoordsHelper",void 0),i([n({constructOnly:!0})],d.prototype,"fetchEdgeLocations",void 0),i([n({constructOnly:!0})],d.prototype,"schedule",void 0),i([n({readOnly:!0})],d.prototype,"availability",void 0),d=i([y("esri.views.interactive.snapping.featureSources.sceneLayerSource.SceneLayerSnappingSourceWorkerHandle")],d);let R=class extends ${constructor(t,r){super("SceneLayerSnappingSourceWorker","fetchCandidates",{},t,{strategy:"dedicated",client:r})}};const P=S();let a=class extends m{get updating(){return this._updatingHandles.updating}constructor(e){super(e),this.availability=1,this._updatingHandles=new L,this._abortController=new AbortController}destroy(){this._tracker=f(this._tracker),this._abortController=b(this._abortController),this._updatingHandles.destroy()}initialize(){const{view:e}=this,t=e.resourceController;this._edgeWorker=new E(w(t)),this._workerHandle=new d({renderCoordsHelper:this.view.renderCoordsHelper,schedule:w(t),fetchEdgeLocations:async(r,o)=>{if(this._tracker==null)throw new Error("tracker-not-initialized");return this._tracker.fetchEdgeLocations(r,this._edgeWorker,o)}}),this._updatingHandles.addPromise(this._setupLayerView()),this.addHandles([g(this._workerHandle),g(this._edgeWorker)])}async fetchCandidates(e,t){return this._workerHandle.fetchCandidates(e,t)}refresh(){}async _setupLayerView(){var r;if(this.destroyed)return;const e=(r=this._abortController)==null?void 0:r.signal,t=await this.getLayerView();t==null||k(e)||(this._tracker=t.trackSnappingSources({add:(o,s)=>{this._updatingHandles.addPromise(this._workerHandle.add({id:o,bounds:s},e))},remove:o=>{this._updatingHandles.addPromise(this._workerHandle.remove({id:o},e))}}))}};function w(e){return t=>e.immediate.schedule(t)}i([n({constructOnly:!0})],a.prototype,"getLayerView",void 0),i([n({constructOnly:!0})],a.prototype,"view",void 0),i([n({readOnly:!0})],a.prototype,"updating",null),i([n({readOnly:!0})],a.prototype,"availability",void 0),a=i([y("esri.views.interactive.snapping.featureSources.I3SSnappingSource")],a);let p=class extends m{get updating(){return this._i3sSources.some(e=>e.updating)}constructor(e){super(e),this.availability=1,this._i3sSources=[]}destroy(){this._i3sSources.forEach(e=>e.destroy()),this._i3sSources.length=0}initialize(){const{view:e}=this,t=this.layerSource.layer;this._i3sSources=t.type==="building-scene"?this._getBuildingSceneI3SSources(e,t):[this._getSceneLayerI3SSource(e,t)]}async fetchCandidates(e,t){const r=await Promise.all(this._i3sSources.map(o=>o.fetchCandidates(e,t)));return C(t),r.flat()}refresh(){this._i3sSources.forEach(e=>e.refresh())}_getBuildingSceneI3SSources(e,t){return t.allSublayers.toArray().map(r=>r.type==="building-component"?new a({getLayerView:async()=>(await e.whenLayerView(t)).whenSublayerView(r),view:e}):null).filter(H)}_getSceneLayerI3SSource(e,t){return new a({getLayerView:async()=>{const r=await e.whenLayerView(t);return r.type==="scene-layer-graphics-3d"?void 0:r},view:e})}};i([n({constructOnly:!0})],p.prototype,"layerSource",void 0),i([n({constructOnly:!0})],p.prototype,"view",void 0),i([n({readOnly:!0})],p.prototype,"updating",null),i([n({readOnly:!0})],p.prototype,"availability",void 0),p=i([y("esri.views.interactive.snapping.featureSources.SceneLayerSnappingSource")],p);export{p as SceneLayerSnappingSource};

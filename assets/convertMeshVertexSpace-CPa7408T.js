import{M as p,s,a as i}from"./index-DX0rcHuW.js";import{l as n}from"./MeshVertexAttributes-DiX-RN8y.js";import{M as c}from"./vertexSpaceConversion-BW-Bnw8A.js";import"./mat3-Ck4GO2qT.js";import"./mat3f64-BBpwCtoL.js";import"./mat4f64-Dk4dwAN8.js";import"./spatialReferenceEllipsoidUtils-Bv0mQCFg.js";import"./computeTranslationToOriginAndRotation-B9BchKSd.js";import"./projectPointToVector-6lqiVL77.js";import"./meshVertexSpaceUtils-UWZ_3JBG.js";import"./MeshLocalVertexSpace-Ck1lhGhd.js";import"./vec3-DxxvdsHs.js";import"./projection-BJFZt5ZW.js";import"./DoubleArray-tnpOy9RK.js";import"./BufferView-XrMc2vJu.js";import"./vec2-C-4tM9Uv.js";import"./vec4-B2fX0VJI.js";async function P(t,r,m){await Promise.resolve(),p(m);const o=c(t,r);if(!o)throw new s("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const e=t.cloneAndModifyVertexAttributes(new n({...o,uv:i(t.vertexAttributes.uv),color:i(t.vertexAttributes.color)}),r);return e.transform=null,e}export{P as convertMeshVertexSpace};

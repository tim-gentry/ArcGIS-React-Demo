import{s as g,M as c,c4 as T,b0 as E,cb as P,n as y,N as _,ap as R,G as q}from"./index-DX0rcHuW.js";import{o as I,r as b}from"./featureConversionUtils-C8uvc1AG.js";import{m as $}from"./FeatureStore-BRjii-6R.js";import{x as j,j as N}from"./timeSupport-BrCiU-ir.js";import{$ as M}from"./QueryEngine-SKHuQoIy.js";import{E as O,N as Q}from"./geojson-xamnoSBL.js";import{p as k}from"./sourceUtils-B1mC5vKW.js";import{o as L,e as G,K as f}from"./wfsUtils-CqVO2rQi.js";import"./OptimizedFeature-7juV2tZm.js";import"./OptimizedGeometry-vU5jWBvU.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./BoundsStore-266MdP16.js";import"./PooledRBush-txtruiUM.js";import"./quickselect-D0_cvEX6.js";import"./_commonjsHelpers-DCkdB7M8.js";import"./optimizedFeatureQueryEngineAdapter-Buta7wlw.js";import"./centroid-DdLmOD72.js";import"./normalizeUtils-CzEkgn6d.js";import"./normalizeUtilsCommon-DXRtgGFh.js";import"./utils-nzDIu46v.js";import"./utils-D67OULxu.js";import"./json-Wa8cmqdu.js";import"./WhereClause-C3Bpu3MP.js";import"./TimeOnly-DZBbU_oj.js";import"./utils-NIIWJwfl.js";import"./utils-CZ12wTZ2.js";import"./Basemap-CjElSnyL.js";import"./loadAll-8MiqgLTH.js";import"./writeUtils-RiCb1SCd.js";import"./utils-fmpzjX3M.js";import"./ClassBreaksDefinition-RQBfkmon.js";import"./SnappingCandidate-O5eRSE6e.js";import"./Scheduler-Bg_fxWwI.js";import"./signal-CpmfLcHB.js";import"./debugFlags-Cr0sx6r_.js";import"./date-M6n_RqpC.js";import"./xmlUtils-CtUoQO7q.js";import"./arcgisLayerUrl-BpJodxxk.js";const x="esri.layers.WFSLayer";class Et{constructor(){this._customParameters=null,this._queryEngine=null,this._supportsPagination=!0}destroy(){var t;(t=this._queryEngine)==null||t.destroy(),this._queryEngine=null}async load(t,e={}){const{getFeatureUrl:r,getFeatureOutputFormat:s,fields:i,geometryType:u,featureType:o,maxRecordCount:n,maxTotalRecordCount:m,maxPageCount:C,objectIdField:d,customParameters:F}=t,{spatialReference:l,getFeatureSpatialReference:p}=L(r,o,t.spatialReference);try{await j(p,l)}catch{throw new g("unsupported-projection","Projection not supported",{inSpatialReference:p,outSpatialReference:l})}c(e),this._customParameters=F,this._featureType=o,this._fieldsIndex=T.fromLayerJSON({fields:i,dateFieldsTimeReference:i.some(S=>S.type==="esriFieldTypeDate")?{timeZoneIANA:E}:null}),this._geometryType=u,this._getFeatureUrl=r,this._getFeatureOutputFormat=s,this._getFeatureSpatialReference=p,this._maxRecordCount=n,this._maxTotalRecordCount=m,this._maxPageCount=C,this._objectIdField=d,this._spatialReference=l;let h=await this._snapshotFeatures(e);if(h.errors.length>0&&(this._supportsPagination=!1,h=await this._snapshotFeatures(e),h.errors.length>0))throw h.errors[0];return this._queryEngine=new M({fieldsIndex:this._fieldsIndex,geometryType:u,hasM:!1,hasZ:!1,objectIdField:d,spatialReference:l,timeInfo:null,featureStore:new $({geometryType:u,hasM:!1,hasZ:!1})}),this._queryEngine.featureStore.addMany(h.features),{warnings:w(h),extent:(await this._queryEngine.fetchRecomputedExtents()).fullExtent}}async applyEdits(){throw new g("wfs-source:editing-not-supported","applyEdits() is not supported on WFSLayer")}async queryFeatures(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(t,e.signal)}async queryFeatureCount(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(t,e.signal)}async queryObjectIds(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(t,e.signal)}async queryExtent(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(t,e.signal)}async querySnapping(t,e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForSnapping(t,e.signal)}async refresh(t){var e;return this._customParameters=t.customParameters,this._maxRecordCount=t.maxRecordCount,this._maxTotalRecordCount=t.maxTotalRecordCount,this._maxPageCount=t.maxPageCount,(e=this._snapshotTask)==null||e.abort(),this._snapshotTask=P(r=>this._snapshotFeatures({signal:r})),this._snapshotTask.promise.then(r=>{var s;this._queryEngine.featureStore.clear(),this._queryEngine.featureStore.addMany(r.features);for(const i of w(r))y.getLogger(x).warn(new _("wfs-layer:refresh-warning",i.message,i.details));(s=r.errors)!=null&&s.length&&y.getLogger(x).warn(new _("wfs-layer:refresh-error","Refresh completed with errors",{errors:r.errors}))},()=>{this._queryEngine.featureStore.clear()}),await this._waitSnapshotComplete(),{extent:(await this._queryEngine.fetchRecomputedExtents()).fullExtent}}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _snapshotFeatures(t){const e=t==null?void 0:t.signal,r=this._maxTotalRecordCount,s=this._maxPageCount,i=this._supportsPagination?await G(this._getFeatureUrl,this._featureType.typeName,{customParameters:this._customParameters,signal:e}):void 0;let u=[];const o=[];if(i==null)try{u=await this._singleQuery(e)}catch(n){R(n)||o.push(n)}else{const n=Math.min(i,r),m=U(this,Math.max(1,Math.min(Math.ceil(n/this._maxRecordCount),s)),e);await Promise.allSettled(Array.from({length:10}).map(()=>Z(m,u,o)))}return c(e),{features:u,totalRecordCount:i,maxTotalRecordCount:r,maxPageCount:s,errors:o}}async _singleQuery(t){const e=await f(this._getFeatureUrl,this._featureType.typeName,this._getFeatureSpatialReference,this._getFeatureOutputFormat,{customParameters:this._customParameters,signal:t});return this._processGeoJSON(e,{signal:t})}async _pageQuery(t,e){const r=t*this._maxRecordCount,s=await f(this._getFeatureUrl,this._featureType.typeName,this._getFeatureSpatialReference,this._getFeatureOutputFormat,{customParameters:this._customParameters,startIndex:r,count:this._maxRecordCount,signal:e});return this._processGeoJSON(s,{startIndex:r,signal:e})}_processGeoJSON(t,e){O(t,this._getFeatureSpatialReference.wkid);const{startIndex:r,signal:s}=e;c(s);const i=Q(t,{geometryType:this._geometryType,hasZ:!1,objectIdField:this._objectIdField});if(!q(this._spatialReference,this._getFeatureSpatialReference))for(const o of i)o.geometry!=null&&(o.geometry=I(N(b(o.geometry,this._geometryType,!1,!1),this._getFeatureSpatialReference,this._spatialReference)));let u=r??1;for(const o of i){const n={};k(this._fieldsIndex,n,o.attributes,!0),o.attributes=n,n[this._objectIdField]==null&&(o.objectId=n[this._objectIdField]=u++)}return i}}function*U(a,t,e){for(let r=0;r<t;r++)yield a._pageQuery(r,e)}async function Z(a,t,e){let r=a.next();for(;!r.done;){try{const s=await r.value;t.push(...s)}catch(s){R(s)||e.push(s)}r=a.next()}}function w(a){const t=[];return a.totalRecordCount!=null&&(a.features.length<a.totalRecordCount&&t.push({name:"wfs-layer:maxRecordCount-too-low",message:`Could only fetch ${a.features.length} of ${a.totalRecordCount} in ${a.maxPageCount} queries. Try increasing the value of WFSLayer.maxRecordCount.`,details:{recordCount:a.features.length,totalRecordCount:a.totalRecordCount}}),a.totalRecordCount>a.maxTotalRecordCount&&t.push({name:"wfs-layer:large-dataset",message:`The number of ${a.totalRecordCount} features exceeds the maximum allowed of ${a.maxTotalRecordCount}.`,details:{recordCount:a.features.length,totalRecordCount:a.totalRecordCount,maxTotalRecordCount:a.maxTotalRecordCount}})),t}export{Et as default};

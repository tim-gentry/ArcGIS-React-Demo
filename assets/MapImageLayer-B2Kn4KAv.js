import{dA as $,gn as O,dB as T,a7 as P,a8 as L,a9 as E,g4 as F,ga as M,H as R,fA as v,fp as g,go as N,U as f,aL as _,g1 as j,s as x,ap as q,ac as a,ad as s,gp as S,ae as J,ak as U,af as A,ag as k,ah as V,gq as z}from"./index-DX0rcHuW.js";import{t as B}from"./loadAll-8MiqgLTH.js";import{i as H}from"./scaleUtils-ClqQrarK.js";import{i as Z}from"./APIKeyMixin-DSbft86T.js";import{m as C,f as D,t as G}from"./SublayersOwner-D6ZOAJLX.js";import{l as K}from"./ArcGISService-CVVnFG2B.js";import{y as W}from"./ExportImageParameters-C0dqlx0B.js";import{t as Q}from"./imageBitmapUtils-Cem1rTGf.js";import{e as I}from"./sublayerUtils-BdOfNgEy.js";import{t as X}from"./versionUtils-DlHqsQBg.js";import"./arcgisLayerUrl-BpJodxxk.js";import"./CollectionFlattener-Be8YW6oV.js";import"./QueryTask-BEsi-5Fi.js";import"./infoFor3D-CxOdoily.js";import"./utils-nzDIu46v.js";import"./executeForIds-BJu0fyay.js";import"./query-95tcIPsI.js";import"./normalizeUtils-CzEkgn6d.js";import"./normalizeUtilsCommon-DXRtgGFh.js";import"./utils-D67OULxu.js";import"./pbfQueryUtils-B33F7Io8.js";import"./pbf-9I_px9lQ.js";import"./OptimizedGeometry-vU5jWBvU.js";import"./OptimizedFeature-7juV2tZm.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./queryZScale-B1r3mH-Y.js";import"./executeQueryJSON-_Gsxb9pi.js";import"./executeQueryPBF-Ds4PRVlt.js";import"./featureConversionUtils-C8uvc1AG.js";import"./FeatureType-Bb4KOLCq.js";import"./LayerFloorInfo-D-bXPB8b.js";import"./Relationship-Clp_49iY.js";import"./serviceCapabilitiesUtils-CIgEASrL.js";import"./floorFilterUtils-DZ5C6FQv.js";let i=class extends $(O(T(C(D(K(P(L(E(F(Z(M(V)))))))))))){constructor(...e){super(...e),this._exportImageParameters=new W({layer:this}),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,r){return typeof e=="string"?{url:e,...r}:e}load(e){const r=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(R).then(()=>this._fetchService(r))),Promise.resolve(this)}destroy(){this._exportImageParameters.destroy()}readImageFormat(e,r){const l=r.supportedImageFormatTypes;return l&&l.includes("PNG32")?"png32":"png24"}writeSublayers(e,r,l,t){var m,u,b;if(!this.loaded||!e)return;const o=e.slice().reverse().flatten(({sublayers:n})=>n&&n.toArray().reverse()).toArray();let p=!1;const h=v(t.origin);if((m=this.capabilities)!=null&&m.operations.supportsExportMap&&((b=(u=this.capabilities)==null?void 0:u.exportMap)!=null&&b.supportsDynamicLayers)){if(h===g.PORTAL_ITEM){const n=this.createSublayersForOrigin("service").sublayers;p=I(o,n,g.SERVICE)}else if(h>g.PORTAL_ITEM){const n=this.createSublayersForOrigin("portal-item");p=I(o,n.sublayers,v(n.origin))}}const d=[],c={writeSublayerStructure:p,...t};let y=p||this.hasVisibleLayersForOrigin(h);o.forEach(n=>{const w=n.write({},c);d.push(w),y=y||n.originOf("visible")==="user"}),d.some(n=>Object.keys(n).length>1)&&(r.layers=d),y&&(r.visibleLayers=o.filter(n=>n.visible).map(n=>n.id))}createExportImageParameters(e,r,l,t){const o=(t==null?void 0:t.pixelRatio)||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian()),this._exportImageParameters.floors=(t==null?void 0:t.floors)??null,this._exportImageParameters.scale=H({extent:e,width:r})*o;const p=this._exportImageParameters.toJSON(),h=!(t!=null&&t.rotation)||this.version<10.3?{}:{rotation:-t.rotation},d=e==null?void 0:e.spatialReference,c=N(d);p.dpi*=o;const y={};if(t!=null&&t.timeExtent){const{start:m,end:u}=t.timeExtent.toJSON();y.time=m&&u&&m===u?""+m:`${m??"null"},${u??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(y.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:c,imageSR:c,size:r+","+l,...p,...h,...y}}async fetchImage(e,r,l,t){const{data:o}=await this._fetchImage("image",e,r,l,t);return o}async fetchImageBitmap(e,r,l,t){const{data:o,url:p}=await this._fetchImage("blob",e,r,l,t);return Q(o,p,t==null?void 0:t.signal)}async fetchRecomputedExtents(e={}){const r={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:l}=await f(this.url,r),{extent:t,fullExtent:o,timeExtent:p}=l,h=t||o;return{fullExtent:h&&_.fromJSON(h),timeExtent:p&&j.fromJSON({start:p[0],end:p[1]})}}loadAll(){return B(this,e=>{e(this.allSublayers),e(this.subtables)})}serviceSupportsSpatialReference(e){return X(this,e)}async _fetchImage(e,r,l,t,o){var d,c,y;const p={responseType:e,signal:(o==null?void 0:o.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(r,l,t,o),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},h=this.parsedUrl.path+"/export";if(((d=p.query)==null?void 0:d.dynamicLayers)!=null&&!((y=(c=this.capabilities)==null?void 0:c.exportMap)!=null&&y.supportsDynamicLayers))throw new x("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:p.query});try{const{data:m}=await f(h,p);return{data:m,url:h}}catch(m){throw q(m)?m:new x("mapimagelayer:image-fetch-error",`Unable to load image: ${h}`,{error:m})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:r,ssl:l}=await f(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});l&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=r,this.read(r,{origin:"service",url:this.parsedUrl})}hasVisibleLayersForOrigin(e){var r;return!(e==null||!((r=this.sublayersSourceJSON[e])!=null&&r.visibleLayers))}};a([s(S("dateFieldsTimeReference"))],i.prototype,"dateFieldsTimeZone",void 0),a([s({type:Boolean})],i.prototype,"datesInUnknownTimezone",void 0),a([s()],i.prototype,"dpi",void 0),a([s()],i.prototype,"gdbVersion",void 0),a([s()],i.prototype,"imageFormat",void 0),a([J("imageFormat",["supportedImageFormatTypes"])],i.prototype,"readImageFormat",null),a([s({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],i.prototype,"imageMaxHeight",void 0),a([s({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],i.prototype,"imageMaxWidth",void 0),a([s()],i.prototype,"imageTransparency",void 0),a([s({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],i.prototype,"isReference",void 0),a([s({json:{read:!1,write:!1}})],i.prototype,"labelsVisible",void 0),a([s({type:["ArcGISMapServiceLayer"]})],i.prototype,"operationalLayerType",void 0),a([s({json:{read:!1,write:!1}})],i.prototype,"popupEnabled",void 0),a([s(S("preferredTimeReference"))],i.prototype,"preferredTimeZone",void 0),a([s()],i.prototype,"sourceJSON",void 0),a([s({json:{write:{ignoreOrigin:!0}}})],i.prototype,"sublayers",void 0),a([U("sublayers",{layers:{type:[G]},visibleLayers:{type:[z]}})],i.prototype,"writeSublayers",null),a([s({type:["show","hide","hide-children"]})],i.prototype,"listMode",void 0),a([s({json:{read:!1},readOnly:!0,value:"map-image"})],i.prototype,"type",void 0),a([s(A)],i.prototype,"url",void 0),i=a([k("esri.layers.MapImageLayer")],i);const Ne=i;export{Ne as default};
